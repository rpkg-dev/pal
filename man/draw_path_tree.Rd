% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{draw_path_tree}
\alias{draw_path_tree}
\title{Draw path tree}
\usage{
draw_path_tree(paths, quiet = FALSE)
}
\arguments{
\item{paths}{A character vector of paths as returned by \code{\link[=flatten_path_tree]{flatten_path_tree()}} or \code{\link[fs:dir_ls]{fs::dir_ls()}}.}

\item{quiet}{Whether or not to suppress drawing the directory tree.}
}
\value{
\code{paths}, invisibly.
}
\description{
Pretty-prints a character vector of hierarchical paths as a tree. Uses \href{https://en.wikipedia.org/wiki/Box-drawing_character#Box_Drawing}{Unicode box drawing characters} to draw the nesting structure.
}
\details{
This function is the equivalent of \code{\link[fs:dir_tree]{fs::dir_tree()}} for an artificial/fictional path hierarchy. To print a tree of an actual filesystem path hierarchy, it's
recommended to rely on \code{fs::dir_tree()} which additionally colorizes the output based on real filesystem information. Apart from that, the algorithm to draw
the tree is the same.
}
\examples{
# using an artificial/fictional path hierarchy
list("root_dir" = list("subdir1",
                       "subdir2" = list("file1.ext"),
                       "file2.ext")) |>
  flatten_path_tree() |>
  pal::draw_path_tree()

# using an actual path hierarchy
fs::path_package("dplyr") |>
  fs::dir_ls(recurse = TRUE) |>
  pal::draw_path_tree()

# to get colorized output, use `fs::dir_tree()` instead
fs::path_package("dplyr") |> fs::dir_tree()
}
\seealso{
Other path functions:
\code{\link{flatten_path_tree}()},
\code{\link{path_mod_time}()}
}
\concept{path}
