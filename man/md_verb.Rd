% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{md_verb}
\alias{md_verb}
\title{Convert to verbatim Markdown}
\usage{
md_verb(
  ...,
  .eval = TRUE,
  .collapse = " ",
  .backtick = TRUE,
  .control = c("keepNA", "keepInteger", "niceNames", "showAttributes", "warnIncomplete"),
  .width.cutoff = 500L,
  .nlines = -1L
)
}
\arguments{
\item{...}{\R expression(s) to convert to verbatim Markdown. Must be unnamed. \link[rlang:dyn-dots]{Dynamic dots} are supported.}

\item{.eval}{Whether or not to evaluate the expression(s) in \code{...}.}

\item{.collapse}{String to separate the results of a single expression in \code{...}.}

\item{.backtick}{Whether or not to enclose symbolic names in backticks if they do not follow the standard syntax.}

\item{.control}{Deparsing options. A character vector or \code{NULL}. See \link[base:deparseOpts]{base::.deparseOpts} for all possible options.}

\item{.width.cutoff}{Cutoff (in bytes) at which line-breaking is tried. An integer scalar between \code{20} and \code{500}.}

\item{.nlines}{Maximum number of lines to produce. A negative value indicates no limit. An integer scalar.}
}
\value{
A character vector of the same length as \code{...}.
}
\description{
Converts the provided \R expressions to their character representation using \code{\link[base:deparse]{base::deparse1()}} and formats them as \href{https://pandoc.org/MANUAL.html#verbatim}{verbatim Markdown}.
}
\examples{
pal::md_verb(1:3, "It", is.logical, `||`, FALSE, quote(`?!`)) |>
  pal::cat_lines()

# you can splice vector or list expressions if you like
pal::md_verb(!!!1:3, "It", is.logical, `||`, FALSE, quote(`?!`)) |>
  pal::cat_lines()

# to evaluate, or not to evaluate, that is the question
pal::md_verb(!!!1:3, "It", is.logical, `||`, FALSE, quote(`?!`),
             .eval = FALSE) |>
  pal::cat_lines()

# unevaluated expressions do not need to exist
pal::md_verb(Not, actual(), `R-expressions`,
             .eval = FALSE) |>
  pal::cat_lines()

# you can opt out of wrapping non-standard syntax in additional backticks
pal::md_verb(Not, actual(), `R-expressions`,
             .eval = FALSE,
             .backtick = FALSE) |>
  pal::cat_lines()
}
\seealso{
Other (Pandoc) Markdown functions:
\code{\link{as_md_list}()},
\code{\link{as_md_val_list}()},
\code{\link{as_md_vals}()},
\code{\link{pipe_table}()},
\code{\link{strip_md}()},
\code{\link{strip_md_footnotes}()}
}
\concept{md}
