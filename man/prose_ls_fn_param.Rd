% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-GEN.R
\name{prose_ls_fn_param}
\alias{prose_ls_fn_param}
\title{List a function's default parameter values in prose-style}
\usage{
prose_ls_fn_param(
  param,
  fn = sys.function(sys.parent()),
  env = parent.frame(),
  as_scalar = TRUE,
  wrap = "`",
  separator = ",",
  last_separator = " or "
)
}
\arguments{
\item{param}{The parameter name. A character scalar.}

\item{fn}{A \link[base:function]{function} or a function name (searched for in \code{env}). See \code{\link[=formals]{formals()}} for details.}

\item{env}{The \link[base:environment]{environment} \code{fn} is defined in. See \code{\link[=formals]{formals()}} for details.}

\item{as_scalar}{Whether to return the result as a single string concatenated by \code{separator} and \code{last_separator}.}

\item{wrap}{The string (usually a single character) in which \code{param}s default values are to be wrapped.}

\item{separator}{The separator to delimit \code{param}s default values. Only relevant if \code{as_scalar = TRUE}.}

\item{last_separator}{The separator to delimit the second-last and last one of \code{param}s default values. Only relevant if \code{as_scalar = TRUE}.}
}
\value{
A character vector. Of length 1 if \code{as_scalar = TRUE}.
}
\description{
Extracts the default value(s) of a function's definition and returns it in \link[=prose_ls]{prose style listing}.
}
\details{
This function can be very convenient to avoid duplication in roxygen2 documentation by leveraging \href{https://roxygen2.r-lib.org/articles/rd-formatting.html#inline-code}{inline \R code evaluation} as follows:\if{html}{\out{<div class="r">}}\preformatted{#' @param some_param Some parameter. One of `r pal::prose_ls_fn_param(param = "some_param", fn = "some_fn")`.
some_fn <- function(some_param = c("a", "b", "c")) \{
  some_param <- rlang::arg_match(some_param)
  ...
\}
}\if{html}{\out{</div>}}

Or to list the possible parameter values formatted as an unnumbered list instead, use the inline code
\code{`r pal::prose_ls_fn_param(param = "some_param", fn = "some_fn", as_scalar = FALSE) \%>\% pal::as_md_list()`} in the example above.
}
\section{Caveats}{
\itemize{
\item This function does not work for \link[base:Primitive]{Primitives}.
\item \code{\link[=deparse]{deparse()}} is used internally to get a character representation of non-character default values. Therefore all of \code{deparse()}'s fuzziness also applies to
this function.
}
}

\examples{
pal::prose_ls_fn_param(param = ".name_repair",
                       fn = tibble::as_tibble) |>
pal::cat_lines()

pal::prose_ls_fn_param(param = ".name_repair",
                       fn = tibble::as_tibble,
                       as_scalar = FALSE) |>
pal::cat_lines()
}
\seealso{
Other R package functions:
\code{\link{assert_pkg}()},
\code{\link{desc_list}()},
\code{\link{desc_value}()},
\code{\link{is_pkg_dir}()},
\code{\link{is_pkg_installed}()},
\code{\link{is_pkgdown_dir}()},
\code{\link{ls_pkg}()}
}
\concept{rpkgs}
