% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{assert_pkg}
\alias{assert_pkg}
\title{Assert a package is installed}
\usage{
assert_pkg(pkg, min_version = NULL, message = NULL, install_hint = NULL)
}
\arguments{
\item{pkg}{Package name (case-sensitive). A character scalar.}

\item{min_version}{Minimum required version number of \code{pkg}. Must be either \code{NULL} to ignore version numbers, or a single
\code{\link[base:numeric_version]{package_version}} or something coercible to.}

\item{message}{Error message to display in case the package is not installed. Supports cli's \link[cli:inline-markup]{inline markup}. If \code{NULL}, a sensible standard
message is generated.}

\item{install_hint}{Additional package installation instructions appended to \code{message}. Either \code{NULL} in order to autogenerate the hint, or a
character scalar. Set \code{install_hint = ""} in order to disable the hint.}
}
\value{
\code{pkg}, invisibly.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \cr
This function has been deprecated in favor of the more powerful \code{\link[rlang:is_installed]{rlang::check_installed()}} and will be removed in the future.

Asserts a package is installed on the current system, optionally ensuring a \code{min_version}. If the package is not installed, an informative error \code{message} is
thrown that by default includes an autogenerated \code{install_hint}.
}
\examples{
pal::assert_pkg("pal")

pal::assert_pkg(pkg = "glue",
                message = paste("You should really consider to install the awesome {.pkg {pkg}}",
                                "package! It's the glue that keeps strings and variables",
                                "together ðŸ¤²."))
try(
  pal::assert_pkg("pal", min_version = "9999.9")
)

try(
  pal::assert_pkg("yay",
                  install_hint = paste0("To install the latest development version, run ",
                                        "{.code remotes::install_gitlab(\"rpkg.dev/yay\")}."))
)
}
\seealso{
\code{\link[rlang:is_installed]{rlang::check_installed()}}

Other R package functions:
\code{\link{is_pkg_cran}()},
\code{\link{is_pkg_dir}()},
\code{\link{is_pkg_installed}()},
\code{\link{is_pkgdown_dir}()},
\code{\link{ls_pkg}()},
\code{\link{use_pkg}()}

Other functions extending the checkmate package:
\code{\link{assert_class_any}()},
\code{\link{assert_cli}()},
\code{\link{assert_df_tbl}()},
\code{\link{assert_inf_count}()},
\code{\link{assert_mime_type}()}
}
\concept{checkmate}
\concept{rpkgs}
