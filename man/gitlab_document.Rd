% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{gitlab_document}
\alias{gitlab_document}
\title{Convert to GitLab Flavored Markdown}
\usage{
gitlab_document(
  smart_punctuation = TRUE,
  parse_emoji_markup = FALSE,
  df_print = "kable",
  toc = FALSE,
  toc_depth = 6L,
  fig_width = 7L,
  fig_height = 5L,
  dev = "png",
  preserve_yaml = FALSE,
  add_footnotes_hr = TRUE,
  autolink_bare_uris = FALSE,
  tex_math_single_backslash = FALSE
)
}
\arguments{
\item{smart_punctuation}{Whether or not to enable \href{https://pandoc.org/MANUAL.html#extension-smart}{Pandoc's \code{smart} extension} which converts straight quotes
to curly quotes, \verb{---} to an em-dash (—), \verb{--} to an en-dash (–), and \code{...} to ellipses (…). It also replaces regular spaces after certain abbreviations
such as \code{Mr.} with \href{https://en.wikipedia.org/wiki/Non-breaking_space}{non-breaking spaces}.}

\item{parse_emoji_markup}{Whether to enable \href{https://pandoc.org/MANUAL.html#extension-emoji}{Pandoc's \code{emoji} extension} which parses emoji markup (e.g.
\verb{:smile:}) as Unicode emoticons.}

\item{df_print}{Method to be used for printing data frames. Valid values
include "default", "kable", "tibble", and "paged". The "default" method
uses a corresponding S3 method of \code{print}, typically
\code{print.data.frame}. The "kable" method uses the
\code{\link[knitr:kable]{knitr::kable}} function. The "tibble" method uses
the \pkg{tibble} package to print a summary of the data frame. The "paged"
method creates a paginated HTML table (note that this method is only valid
for formats that produce HTML). In addition to the named methods you can
also pass an arbitrary function to be used for printing data frames. You
can disable the \code{df_print} behavior entirely by setting the option
\code{rmarkdown.df_print} to \code{FALSE}. See
\href{https://bookdown.org/yihui/rmarkdown/html-document.html#data-frame-printing}{Data
frame printing section} in bookdown book for examples.}

\item{toc}{Include a table of contents (TOC) \href{https://pandoc.org/MANUAL.html#option--toc}{automatically generated by Pandoc}. Note that the TOC will be
placed \emph{before} the README's body, meaning also \emph{before} the first Markdown header.}

\item{toc_depth}{Depth of headers to include in table of contents}

\item{fig_width}{Default width (in inches) for figures}

\item{fig_height}{Default height (in inches) for figures}

\item{dev}{Graphics device to use for figure output (defaults to png)}

\item{preserve_yaml}{Preserve YAML front matter in final document.}

\item{add_footnotes_hr}{Whether to add a trailing horizontal rule (\verb{---}) to the final Markdown file if it doesn't already end in one and contains footnotes
(currently only checks for Pandoc's \href{https://pandoc.org/MANUAL.html#footnotes}{reference-style footnotes} and not inline footnotes). This improves
readability when the file is rendered on \code{GitLab.com}.}

\item{autolink_bare_uris}{Enable the \href{https://pandoc.org/MANUAL.html#extension-autolink_bare_uris}{\code{autolink_bare_uris} Pandoc Markdown extension} which
makes all absolute URIs into links, even when not surrounded by pointy braces \verb{<...>}.}

\item{tex_math_single_backslash}{Enable the
\href{https://pandoc.org/MANUAL.html#extension-tex_math_single_backslash}{\code{tex_math_single_backslash} Pandoc Markdown extension} which causes anything between
\verb{\\(} and \verb{\\)} to be interpreted as inline TeX math, and anything between \verb{\[} and \verb{\]} to be interpreted as display TeX math. Note: a drawback of this
extension is that it precludes escaping \code{(} and \code{[}.}
}
\value{
R Markdown output format intended to be fed to \code{\link[rmarkdown:render]{rmarkdown::render()}}.
}
\description{
Format for converting from R Markdown to \href{https://gitlab.com/help/user/markdown.md}{GitLab Flavored Markdown}.
}
\details{
This is the GitLab equivalent to the \code{\link[rmarkdown:github_document]{github_document}} R Markdown
\href{https://bookdown.org/yihui/rmarkdown/output-formats.html}{output format}. It basically ensures Pandoc is called with a custom set of options optimized for
maximum compatibility with \href{https://gitlab.com/help/user/markdown.md}{GitLab Flavored Markdown}.
\subsection{Caveats regarding GitLab-Flavored-Markdown-specific features}{

GitLab Flavored Markdown extends the \href{https://spec.commonmark.org/current/}{CommonMark} Markdown specification with a bunch of
\href{https://gitlab.com/help/user/markdown.md#gfm-extends-standard-markdown}{special features}. To be able to properly make use of them, observe the following
points:
\itemize{
\item For \href{https://gitlab.com/help/user/markdown.md#inline-diff}{inline diffs}, only use curly braces (\code{{}}), not square brackets (\verb{[]}). The latter will be
escaped by Pandoc during conversion and thus not recognized by GitLab as starting/ending an inline diff.
\item You have to set \code{smart_punctuation = FALSE} in order to leave certain
\href{https://gitlab.com/help/user/markdown.md#special-gitlab-references}{special GitLab references} (like commit range comparisons) untouched for GitLab to
interpret them correctly.

All the special GitLab references for snippets and labels that start with a tilde (\code{~}) or a dollar sign (\code{$}) won't work because these characters will be
escaped by Pandoc during conversion.
\item The \verb{[[_TOC_]]} tag to let GitLab \href{https://gitlab.com/help/user/markdown.md#table-of-contents}{generate a table of contents} won't work because it will be
escaped by Pandoc during conversion. You can let Pandoc generate the TOC instead by setting \code{toc = TRUE}.
\item \href{https://gitlab.com/help/user/markdown.md#multiline-blockquote}{Multiline blockquotes} won't work because the fence delimiters \verb{>>>} will be escaped by
Pandoc during conversion.
}
}
}
\examples{
\donttest{
tmp_file <- fs::file_temp()
download.file(url = paste0("https://gitlab.com/rpkg.dev/pal/-/raw/",
                           "a191aa74994bbaec96ee14f29f2a342ac95e11cd/",
                           "Rmd/pal.Rmd"),
              destfile = tmp_file,
              quiet = TRUE,
              mode = "wb")

rmarkdown::render(input = tmp_file,
                  output_format = pal::gitlab_document(),
                  quiet = TRUE) |>
  brio::read_lines() |>
  length()}
}
\concept{rmd_format}
