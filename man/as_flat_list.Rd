% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-GEN.R
\name{as_flat_list}
\alias{as_flat_list}
\title{Convert to a flat list}
\usage{
as_flat_list(x, keep_attrs = TRUE, attrs_to_drop = "xfun_strict_list")
}
\arguments{
\item{x}{An \R object.}

\item{keep_attrs}{Keep \link[base:attr]{attributes} (and thereby retain list structure of custom objects). A logical scalar.}

\item{attrs_to_drop}{Attribute names which should never be kept. Only relevant if \code{keep_attrs = TRUE}. A character vector.}
}
\value{
A \link[base:list]{list}.
}
\description{
Similar to \code{\link[=unlist]{unlist()}}, i.e. it \emph{recursively} flattens a list. But unlike \code{unlist()}, it
\itemize{
\item always returns a list, i.e. wraps \code{x} in a list if necessary, and will never remove the last list level. Thus it is
\href{https://en.wikipedia.org/wiki/Type_safety}{type-safe}.
\item won't treat any of the list leafs specially (like \code{unlist()} does with factors). Thus leaf values will never be modified.
\item removes list names. \code{unlist()} concatenates nested names (separated by a dot).
}
}
\examples{
nested_list <- list(1:3, list("foo", list("bar"))) \%T>\% str()

# unlike `unlist()` which also removes the last list tier in many cases ...
unlist("foobar")
unlist(nested_list) \%>\% str()
# ... this function always returns an (unnested) list
as_flat_list("foobar") \%>\% str()
as_flat_list(nested_list) \%>\% str()

nested_list <- list(list(factor("a"), factor("b")), factor("c")) \%T>\% str()

# unlike `unlist()` which combines factors ...
unlist(nested_list) \%>\% str()
# ... this function does not modify the list elements
as_flat_list(nested_list) \%>\% str()

nested_list <-
  list(c(list(1L), list(tibble::tibble(a = list(1.1, "2")))),
       list(tibble::as_tibble(mtcars[1:2, ]))) \%T>\%
  str()
nested_list_2 <- list(1:3, xfun::strict_list(list(list("buried deep")))) \%T>\% str()

# by default, attributes and thus custom objects (except `xfun_strict_list`) are retained, i.e.
# not flattened ...
as_flat_list(nested_list) \%>\% str()
as_flat_list(nested_list_2) \%>\% str()
# ... but you can drop them and thereby flatten custom objects if needed ...
as_flat_list(nested_list, keep_attrs = FALSE) \%>\% str()
# ... or retain `xfun_strict_list`s, too
as_flat_list(nested_list_2, attrs_to_drop = NULL) \%>\% str()
}
