% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-GEN.R
\name{all_cols}
\alias{all_cols}
\alias{any_cols}
\title{Temporary helpers for \code{dplyr::filter()}}
\usage{
all_cols(x)

any_cols(x)
}
\arguments{
\item{x}{A data frame or tibble containing numeric, complex, integer or \strong{logical} values.}
}
\value{
A logical vector that's equal to the result of \code{\link[=all]{all()}} (in case of \code{all_cols()}) or \code{\link[=any]{any()}} (in case of \code{any_cols()}) for each row of \code{x}.
}
\description{
\ifelse{html}{\out{<a href='https://www.tidyverse.org/lifecycle/#experimental'><img src='figures/lifecycle-experimental.svg' alt='Experimental lifecycle'></a>}}{\strong{Experimental}}

These are transitional convenience functions that help to combine multiple \code{\link[dplyr:across]{across()}} statements in dplyr's \href{dplyr::filter()}{\code{filter()}}.
See the examples.
}
\details{
\code{any_cols()} is functionally identical to the \code{rowAny()} helper function suggested in dplyr's \href{https://dplyr.tidyverse.org/articles/colwise.html#how-do-you-convert-existing-code}{\code{"colwise"} vignette} but \href{https://github.com/tidyverse/dplyr/issues/4770#issuecomment-704285294}{performs slightly better} (and has a more intuitive name when used with \code{dplyr::filter()}).
}
\examples{
# keep all rows where either `vs` and `am` is greater zero *or* `gear` and `carb` is greater two
mtcars \%>\% dplyr::filter(pal::all_cols(dplyr::across(one_of("vs", "am"), ~ .x > 0))
                         | pal::all_cols(dplyr::across(one_of("gear", "carb"), ~ .x > 2)))

# keep all rows where *any* numeric variable is exactly 1
mtcars \%>\% dplyr::filter(pal::any_cols(dplyr::across(where(is.numeric), ~ .x == 1L)))
}
\seealso{
Data frame / Tibble functions
\code{\link{daff_diff}()},
\code{\link{is_equal_df}()},
\code{\link{open_as_tmp_spreadsheet}()}
}
\concept{tibble}
