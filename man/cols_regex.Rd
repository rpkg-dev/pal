% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-GEN.R
\name{cols_regex}
\alias{cols_regex}
\title{Create column specification using regular expression matching}
\usage{
cols_regex(..., .default = readr::col_character(), .col_names)
}
\arguments{
\item{...}{Named arguments where the names are (Perl-compatible) regular expressions and the values are column objects created by col_*(), or their
abbreviated character names (as described in the col_types argument of \code{\link[readr:read_delim]{readr::read_delim()}}).}

\item{.default}{Any named columns not matched by any of the regular expressions in \code{...} will be read with this column type.}

\item{.col_names}{The column names which should be matched by \code{...}.}
}
\value{
A \link[readr:cols]{column specification}.
}
\description{
\ifelse{html}{\out{<a href='https://www.tidyverse.org/lifecycle/#experimental'><img src='figures/lifecycle-experimental.svg' alt='Experimental lifecycle'></a>}}{\strong{Experimental}}

This function allows to define a regular expression per desired \link[readr:cols]{column specification object} matching the respective column names.
}
\examples{
# some hypothetical CSV data column names
cnames <- c("VAR1_Text",
            "VAR2_Text",
            "VAR3_Text_Other",
            "VAR1_Code_R1",
            "VAR2_Code_R2",
            "HAS_R1_Lag",
            "HAS_R2_Lag",
            "GARBAGEX67",
            "GARBAGEY09")

# create column spec
pal::cols_regex(.col_names   = cnames,
                "_Text[_$]" = "c",
                "_Code[_$]" = "i",
                "^GARBAGE"  = readr::col_skip(),
                .default     = "l")

# parse example data
raw_data <- system.file("extdata/ch_communes_snapshot.csv",
                        package = "readr")

readr::read_csv(
  file = raw_data,
  col_types = pal::cols_regex(
    "(Name|_Title|_Text|^ABBREV)" = "c",
    "^(MutationDate|ValidFrom|ValidTo)$" = readr::col_date(format = "\%d.\%m.\%Y"),
    .default = "i",
    .col_names = pal::dsv_colnames(raw_data)
  )
)

# parse example data (alternative way)
readr::read_csv(file = raw_data,
                col_types = list(.default = "c")) \%>\%
  readr::type_convert(col_types = pal::cols_regex(
    "(Name|_Title|_Text|^ABBREV)" = "c",
    "^(MutationDate|ValidFrom|ValidTo)$" = readr::col_date(format = "\%d.\%m.\%Y"),
    .default = "i",
    .col_names = colnames(.)
  ))
}
