% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal-GEN.R
\name{gh_text_files}
\alias{gh_text_files}
\title{Read in text files from a GitHub repository}
\usage{
gh_text_files(path, owner, name, branch = "main", recurse = FALSE)
}
\arguments{
\item{path}{The path from the repository's root to the desired directory or file. A \link[fs:fs_path]{path} or character scalar.}

\item{owner}{The repository owner's GitHub user or organization name. A character scalar.}

\item{name}{The repository name. A character scalar.}

\item{branch}{The repository's desired branch name. A character scalar.}

\item{recurse}{Whether or not to also include text files in subfolders of \code{path}. A logical scalar. Enabling this option may result in many API calls and
thus produce a significant delay.}
}
\value{
A named character vector of length equal to the number of files found under \code{branch:path} with the file paths as names and the file contents as
values.
}
\description{
Downloads all text files under the specified path from a GitHub repository via \href{https://docs.github.com/graphql}{GitHub's GraphQL API v4} and returns a named
character vector with the file paths as names and the file contents as values.

This is a simple convenience function combining \code{\link[=gh_ls]{gh_ls()}} and \code{\link[=gh_text_file]{gh_text_file()}}.
}
\details{
Works for both public and private repositories, for the latter you just need to set up a sufficiently authorized \link[gh:gh_token]{GitHub Personal Access Token (PAT)}.

Note that nothing is returned in case of a \href{https://en.wikipedia.org/wiki/Binary_file}{\emph{binary} file}, as if no file at all existed under the given
\code{path}.
}
\examples{
pal::gh_text_files(path = "tests",
                   owner = "salim-b",
                   name = "pal",
                   branch = "master")

# you have to opt-in into directory recursion
pal::gh_text_files(path = "tests",
                   owner = "salim-b",
                   name = "pal",
                   branch = "master",
                   recurse = TRUE) |>
  str()
}
\seealso{
Other GitHub functions:
\code{\link{gh_ls}()},
\code{\link{gh_text_file}()}
}
\concept{gh}
