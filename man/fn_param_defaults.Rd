% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{fn_param_defaults}
\alias{fn_param_defaults}
\title{Get function's default parameter values}
\usage{
fn_param_defaults(param, fn = sys.function(sys.parent()), env = parent.frame())
}
\arguments{
\item{param}{Parameter name. A character scalar.}

\item{fn}{A \link[base:function]{function} or a function name (searched for in \code{env}). See \code{\link[base:formals]{base::formals()}} for details.}

\item{env}{\link[base:environment]{Environment} \code{fn} is defined in. See \code{\link[base:formals]{base::formals()}} for details.}
}
\value{
A character vector.
}
\description{
Extracts a function parameter's default value(s) from its language definition and returns the result as a character vector.
}
\details{
This function can be very convenient to avoid duplication in roxygen2 documentation by leveraging \href{https://roxygen2.r-lib.org/articles/rd-formatting.html#inline-code}{inline \R code evaluation} as follows:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{#' @param some_param Some parameter. One of
#'   `r pal::fn_param_defaults(param = "some_param", fn = "some_fn") |> pal::wrap_chr("\\x60") |> cli::ansi_collapse()`.
some_fn <- function(some_param = c("a", "b", "c")) \{
  some_param <- rlang::arg_match(some_param)
  ...
\}
}\if{html}{\out{</div>}}

Or to list the possible parameter values formatted as an unnumbered list instead, replace \code{cli::ansi_collapse()} with \code{\link[=as_md_list]{as_md_list()}} in the example
above.
}
\section{Caveats}{
\code{\link[base:deparse]{base::deparse1()}} is used internally to get a character representation of non-character default values. Therefore all of \code{deparse()}'s fuzziness also
applies to this function.
}

\examples{
pal::fn_param_defaults(param = ".name_repair",
                       fn = tibble::as_tibble)

# as Markdown-formatted enumeration in prose
pal::fn_param_defaults(param = ".name_repair",
                       fn = tibble::as_tibble) |>
  pal::wrap_chr("`") |>
  cli::ansi_collapse() |>
  cat()
}
