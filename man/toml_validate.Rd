% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pal.gen.R
\name{toml_validate}
\alias{toml_validate}
\title{Validate TOML}
\usage{
toml_validate(input, from_file = TRUE, schema = NULL, top_errors_only = TRUE)
}
\arguments{
\item{input}{If \code{from_file = FALSE}, the path to a TOML file as a character scalar. Otherwise TOML content as a character vector.}

\item{from_file}{Whether \code{input} is the path to a TOML file or already a character vector of TOML content.}

\item{schema}{URL to a \href{https://json-schema.org/}{JSON Schema} (\href{https://json-schema.org/specification-links.html#draft-4}{Draft 4}) file to validate \code{input}
against. Can also be a local filesystem path (best specified including the \href{https://en.wikipedia.org/wiki/File_URI_scheme}{file URI scheme} \verb{file://}). If
\code{NULL}, no schema-based validation is performed and \code{input} is only checked to be TOML-compliant.}

\item{top_errors_only}{Whether to reduce the output to the top error message of each of TOML CLI's error classes. If \code{FALSE}, TOML CLI's complete error
output is shown.}
}
\value{
If the validation is successful, \code{input} invisibly. Otherwise an error is thrown.
}
\description{
Validates a TOML file or character vector (if \code{from_file = FALSE}) using the external \href{https://taplo.tamasfe.dev/cli/introduction.html}{Taplo CLI},
optionally against a \href{https://json-schema.org/}{JSON Schema} (\href{https://json-schema.org/specification-links.html#draft-4}{Draft 4}).
}
\details{
The highest supported JSON Schema specification is \href{https://json-schema.org/specification-links.html#draft-4}{Draft 4}. This is a \href{https://taplo.tamasfe.dev/configuration/developing-schemas.html}{limitation of the underlying tool Taplo}.

Taplo allows to define the schema to be used directly in the TOML file using the \href{https://taplo.tamasfe.dev/configuration/directives.html#the-schema-directive}{\code{schema} header directive}. Note that the \code{schema} argument has precendence unless set to
\code{NULL} (the default).
}
\section{Why JSON Schema-based validation}{
Although there are two noteworthy attempts at introducing a native validation format for TOML, \href{https://github.com/toml-lang/toml/pull/116/}{TOLS} and \href{https://github.com/toml-lang/toml/issues/792}{TOML Schema}, neither of them has been officially adopted yet. As it appears, it could take several more years to
decades until such thing happens, if ever.

In the meantime, we can use the JSON Schema format as an alternative thanks to an awesome implementation by the \href{https://taplo.tamasfe.dev/cli/introduction.html}{Taplo CLI}, which itself is written in the Rust programming language and \href{https://taplo.tamasfe.dev/cli/installation/binary.html}{available as a single-binary program for all common platforms}.
}

\examples{
try(
  pal::toml_validate(input = "key = tru",
                     from_file = FALSE)
)
}
\seealso{
Other TOML functions:
\code{\link{toml_read}()}
}
\concept{toml}
