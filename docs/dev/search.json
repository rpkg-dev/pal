[{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pal.rpkg.dev/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee.","code":""},{"path":"https://pal.rpkg.dev/dev/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODOs","title":"TODOs","text":"systematically rely pkg xfun whenever sensible add standards-conformant changelog v0.1.0 use pkg fledge generate Git commits (note special rules mark commit msgs -/exclusion changelog) note according README, fledge plays nicely together Conventional Commits syntax (lot universal; e.g. release-please Release-plz build upon ). see also Rust-written changelog generator git-cliff generate codemeta.json file using pkg codemetar release CRAN: Thoroughly scan exported fns possible API improvements (harder introduce pkg CRAN) outstanding work implement . Migrate httr2! move toml_*() fns sep pkg (tomlr?) remove deprecated fns Replace pkgsnip::* constants included pkg. Make changes (source file Rmd/pal.Rmd ) single commit, can easily reverted. Remove Netlify redirect rule / -> /dev. Release pkg pkgsnip CRAN. Revert step 2.","code":""},{"path":"https://pal.rpkg.dev/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Salim Brüggemann. Author, maintainer.","code":""},{"path":"https://pal.rpkg.dev/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brüggemann S (2024). pal: Friendly Convenience/Utility Functions. R package version 0.0.9102, https://gitlab.com/rpkg.dev/pal, https://pal.rpkg.dev.","code":"@Manual{,   title = {pal: Friendly Convenience/Utility Functions},   author = {Salim Brüggemann},   year = {2024},   note = {R package version 0.0.9102, https://gitlab.com/rpkg.dev/pal},   url = {https://pal.rpkg.dev}, }"},{"path":"https://pal.rpkg.dev/dev/index.html","id":"pal-","dir":"","previous_headings":"","what":"Friendly Convenience/Utility Functions","title":"Friendly Convenience/Utility Functions","text":"collection convenience/utility functions complementing base R tidyverse.1 arguably low-cohesion package.","code":""},{"path":"https://pal.rpkg.dev/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Friendly Convenience/Utility Functions","text":"install latest development version pal, run following R:","code":"if (!(\"remotes\" %in% rownames(installed.packages()))) {   install.packages(pkgs = \"remotes\",                    repos = \"https://cloud.r-project.org/\") }  remotes::install_gitlab(repo = \"rpkg.dev/pal\")"},{"path":"https://pal.rpkg.dev/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Friendly Convenience/Utility Functions","text":"(function) reference found .","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/index.html","id":"r-markdown-format","dir":"","previous_headings":"Development","what":"R Markdown format","title":"Friendly Convenience/Utility Functions","text":"package’s source code written R Markdown file format facilitate practices commonly referred literate programming. allows actual code freely mixed explanatory supplementary information expressive Markdown format instead rely # comments . .gen.R suffixed R source code found R/ generated respective R Markdown counterparts Rmd/ using pkgpurl::purl_rmd()2. Always make changes .Rmd files – never .R files – run pkgpurl::purl_rmd() regenerate R source files.","code":""},{"path":"https://pal.rpkg.dev/dev/index.html","id":"coding-style","dir":"","previous_headings":"Development","what":"Coding style","title":"Friendly Convenience/Utility Functions","text":"package borrows lot Tidyverse design philosophies. R code adheres principles specified Tidyverse Design Guide wherever possible formatted according Tidyverse Style Guide (TSG) following exceptions: Line width limited 160 characters, double limit proposed TSG (80 characters ridiculously little given today’s high-resolution wide screen monitors). Furthermore, preferred style breaking long lines differs. Instead wrapping directly expression’s opening bracket suggested TSG, prefer two fewer line breaks indent subsequent lines within expression opening bracket: results less vertical horizontal spread code better readability pipes. Usage magrittr’s compound assignment pipe-operator %<>% desirable3. Usage R’s right-hand assignment operator -> allowed4. R source code split several files suggested TSG instead (far possible) kept single file Rmd/pal.Rmd well-structured thanks Markdown support. far possible, deviations TSG plus additional restrictions formally specified pkgpurl::default_linters, (default) used pkgpurl::lint_rmd(), turn recommended way lint package.","code":"# TSG proposes this do_something_very_complicated(   something = \"that\",   requires = many,   arguments = \"some of which may be long\" )  # we prefer this do_something_very_complicated(something = \"that\",                               requires = many,                               arguments = \"some of which may be long\")"},{"path":"https://pal.rpkg.dev/dev/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Friendly Convenience/Utility Functions","text":"xfun package Yihui Xie, non-overlapping collection miscellaneous R functions.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort vector by another vector — arrange_by","title":"Sort vector by another vector — arrange_by","text":"Arranges vector x order another vector .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort vector by another vector — arrange_by","text":"","code":"arrange_by(x, by)"},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort vector by another vector — arrange_by","text":"x Vector ordered. Reference vector x ordered .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort vector by another vector — arrange_by","text":"permutation x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort vector by another vector — arrange_by","text":"Note function significantly differs base::sort_by().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/arrange_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort vector by another vector — arrange_by","text":"","code":"library(magrittr)  # generate 100 random letters random_letters <-   letters |>   magrittr::extract(sample.int(n = 26L,                                size = 100L,                                replace = TRUE)) %T>%   print() #>   [1] \"m\" \"w\" \"l\" \"e\" \"f\" \"o\" \"o\" \"d\" \"f\" \"i\" \"e\" \"e\" \"x\" \"o\" \"m\" \"b\" \"w\" \"k\" \"k\" \"e\" \"u\" \"l\" \"b\" \"f\" \"d\" \"p\" \"b\" \"c\" \"y\" \"v\" \"k\" \"g\" \"u\" \"f\" \"i\" \"v\" \"j\" \"u\" #>  [39] \"b\" \"q\" \"t\" \"x\" \"v\" \"a\" \"f\" \"b\" \"s\" \"n\" \"a\" \"y\" \"o\" \"r\" \"e\" \"h\" \"a\" \"l\" \"s\" \"p\" \"k\" \"z\" \"c\" \"b\" \"w\" \"j\" \"c\" \"f\" \"d\" \"j\" \"a\" \"g\" \"f\" \"v\" \"s\" \"y\" \"b\" \"h\" #>  [77] \"a\" \"a\" \"g\" \"l\" \"v\" \"i\" \"j\" \"b\" \"f\" \"g\" \"l\" \"z\" \"v\" \"n\" \"e\" \"g\" \"s\" \"l\" \"q\" \"e\" \"q\" \"m\" \"f\" \"a\"  # sort the random letters alphabetically random_letters |> pal::arrange_by(by = letters) #>   [1] \"a\" \"a\" \"a\" \"a\" \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\" \"d\" \"d\" \"d\" \"e\" \"e\" \"e\" \"e\" \"e\" \"e\" \"e\" \"f\" \"f\" \"f\" \"f\" \"f\" \"f\" \"f\" \"f\" \"f\" \"g\" #>  [39] \"g\" \"g\" \"g\" \"g\" \"h\" \"h\" \"i\" \"i\" \"i\" \"j\" \"j\" \"j\" \"j\" \"k\" \"k\" \"k\" \"k\" \"l\" \"l\" \"l\" \"l\" \"l\" \"l\" \"m\" \"m\" \"m\" \"n\" \"n\" \"o\" \"o\" \"o\" \"o\" \"p\" \"p\" \"q\" \"q\" \"q\" \"r\" #>  [77] \"s\" \"s\" \"s\" \"s\" \"t\" \"u\" \"u\" \"u\" \"v\" \"v\" \"v\" \"v\" \"v\" \"v\" \"w\" \"w\" \"w\" \"x\" \"x\" \"y\" \"y\" \"y\" \"z\" \"z\""},{"path":"https://pal.rpkg.dev/dev/reference/as_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a character vector — as_chr","title":"Convert to a character vector — as_chr","text":"Recursively applies base::.character() inputs.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a character vector — as_chr","text":"","code":"as_chr(..., use_names = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/as_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a character vector — as_chr","text":"... R objects converted character vector. Dynamic dots supported. use_names Whether preserve names base::unlist().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a character vector — as_chr","text":"character vector.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a character vector — as_chr","text":"","code":"library(magrittr)  to_convert <-   list(tibble::tibble(a = 1:3), \"A\", factor(\"wonderful\"), xfun::strict_list(\"day\")) %T>%   print() #> [[1]] #> # A tibble: 3 × 1 #>       a #>   <int> #> 1     1 #> 2     2 #> 3     3 #>  #> [[2]] #> [1] \"A\" #>  #> [[3]] #> [1] wonderful #> Levels: wonderful #>  #> [[4]] #> [[1]] #> [1] \"day\" #>  #>   as.character(to_convert) #> [1] \"list(a = 1:3)\" \"A\"             \"1\"             \"list(\\\"day\\\")\" pal::as_chr(!!!to_convert) #> [1] \"1\"         \"2\"         \"3\"         \"A\"         \"wonderful\" \"day\""},{"path":"https://pal.rpkg.dev/dev/reference/as_comment_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble an (R) comment string of the desired line width — as_comment_str","title":"Assemble an (R) comment string of the desired line width — as_comment_str","text":"Takes vector paragraphs, wraps specified line width, prefixes comment markers returns result single string.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_comment_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble an (R) comment string of the desired line width — as_comment_str","text":"","code":"as_comment_str(   ...,   line_width = 160L,   comment_prefix = \"# \",   sep_paragraphs = TRUE )"},{"path":"https://pal.rpkg.dev/dev/reference/as_comment_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble an (R) comment string of the desired line width — as_comment_str","text":"... Comment lines. character vector something coercible . line_width Maximum character width wrap lines. positive integerish scalar. comment_prefix Character sequence indicates start comment. character scalar. sep_paragraphs Whether separate paragraphs empty comment line.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_comment_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble an (R) comment string of the desired line width — as_comment_str","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_comment_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble an (R) comment string of the desired line width — as_comment_str","text":"","code":"pal::as_comment_str(glue::glue(\"Copyright (C) {format(Sys.Date(), '%Y')} Santa Clause\"),                     \"No presents without code.\") |>   cat() #> # Copyright (C) 2024 Santa Clause #> #  #> # No presents without code.  # wrap lines at 20 chars pal::as_comment_str(glue::glue(\"Copyright (C) {format(Sys.Date(), '%Y')} Santa Clause\"),                     \"No presents without code.\",                     line_width = 20L) |>   cat() #> # Copyright (C) 2024 #> # Santa Clause #> #  #> # No presents #> # without code.  # disable empty comment lines between paragraphs: pal::as_comment_str(glue::glue(\"Copyright (C) {format(Sys.Date(), '%Y')} Santa Clause\"),                     \"Hohoho.\",                     sep_paragraphs = FALSE) |>   cat() #> # Copyright (C) 2024 Santa Clause #> # Hohoho."},{"path":"https://pal.rpkg.dev/dev/reference/as_flat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a flat list — as_flat_list","title":"Convert to a flat list — as_flat_list","text":"Recursively flattens list. Unlike similar unlist(), always returns list, .e. wraps x list necessary, never remove last list level. Thus type-safe. treat list leafs specially (like unlist() factors). Thus leaf values never modified. removes list names. unlist() concatenates nested names (separated dot).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_flat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a flat list — as_flat_list","text":"","code":"as_flat_list(x, keep_attrs = TRUE, attrs_to_drop = \"xfun_strict_list\")"},{"path":"https://pal.rpkg.dev/dev/reference/as_flat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a flat list — as_flat_list","text":"x R object. keep_attrs Keep attributes (thereby retain list structure custom objects). logical scalar. attrs_to_drop Attribute names never kept. relevant keep_attrs = TRUE. character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_flat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a flat list — as_flat_list","text":"list.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_flat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a flat list — as_flat_list","text":"","code":"library(magrittr)  nested_list <- list(1:3, list(\"foo\", list(\"bar\"))) %T>% str() #> List of 2 #>  $ : int [1:3] 1 2 3 #>  $ :List of 2 #>   ..$ : chr \"foo\" #>   ..$ :List of 1 #>   .. ..$ : chr \"bar\"  # unlike `unlist()` which also removes the last list tier in many cases... unlist(\"foobar\") #> [1] \"foobar\" unlist(nested_list) |> str() #>  chr [1:5] \"1\" \"2\" \"3\" \"foo\" \"bar\" # ...this function always returns an (unnested) list pal::as_flat_list(\"foobar\") |> str() #> List of 1 #>  $ : chr \"foobar\" pal::as_flat_list(nested_list) |> str() #> List of 3 #>  $ : int [1:3] 1 2 3 #>  $ : chr \"foo\" #>  $ : chr \"bar\"  nested_list <- list(list(factor(\"a\"), factor(\"b\")), factor(\"c\")) %T>% str() #> List of 2 #>  $ :List of 2 #>   ..$ : Factor w/ 1 level \"a\": 1 #>   ..$ : Factor w/ 1 level \"b\": 1 #>  $ : Factor w/ 1 level \"c\": 1  # unlike `unlist()` which combines factors... unlist(nested_list) |> str() #>  Factor w/ 3 levels \"a\",\"b\",\"c\": 1 2 3 # ...this function does not modify the list elements pal::as_flat_list(nested_list) |> str() #> List of 3 #>  $ : Factor w/ 1 level \"a\": 1 #>  $ : Factor w/ 1 level \"b\": 1 #>  $ : Factor w/ 1 level \"c\": 1  nested_list <-   list(c(list(1L), list(tibble::tibble(a = list(1.1, \"2\")))),        list(tibble::as_tibble(mtcars[1:2, ]))) %T>%   str() #> List of 2 #>  $ :List of 2 #>   ..$ : int 1 #>   ..$ : tibble [2 × 1] (S3: tbl_df/tbl/data.frame) #>   .. ..$ a:List of 2 #>   .. .. ..$ : num 1.1 #>   .. .. ..$ : chr \"2\" #>  $ :List of 1 #>   ..$ : tibble [2 × 11] (S3: tbl_df/tbl/data.frame) #>   .. ..$ mpg : num [1:2] 21 21 #>   .. ..$ cyl : num [1:2] 6 6 #>   .. ..$ disp: num [1:2] 160 160 #>   .. ..$ hp  : num [1:2] 110 110 #>   .. ..$ drat: num [1:2] 3.9 3.9 #>   .. ..$ wt  : num [1:2] 2.62 2.88 #>   .. ..$ qsec: num [1:2] 16.5 17 #>   .. ..$ vs  : num [1:2] 0 0 #>   .. ..$ am  : num [1:2] 1 1 #>   .. ..$ gear: num [1:2] 4 4 #>   .. ..$ carb: num [1:2] 4 4 nested_list_2 <- list(1:3, xfun::strict_list(list(list(\"buried deep\")))) %T>% str() #> List of 2 #>  $ : int [1:3] 1 2 3 #>  $ :List of 1 #>   ..$ :List of 1 #>   .. ..$ :List of 1 #>   .. .. ..$ : chr \"buried deep\" #>   ..- attr(*, \"class\")= chr \"xfun_strict_list\"  # by default, attributes and thus custom objects (except `xfun_strict_list`) are retained, i.e. # not flattened... pal::as_flat_list(nested_list) |> str() #> List of 3 #>  $ : int 1 #>  $ : tibble [2 × 1] (S3: tbl_df/tbl/data.frame) #>   ..$ a:List of 2 #>   .. ..$ : num 1.1 #>   .. ..$ : chr \"2\" #>  $ : tibble [2 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ mpg : num [1:2] 21 21 #>   ..$ cyl : num [1:2] 6 6 #>   ..$ disp: num [1:2] 160 160 #>   ..$ hp  : num [1:2] 110 110 #>   ..$ drat: num [1:2] 3.9 3.9 #>   ..$ wt  : num [1:2] 2.62 2.88 #>   ..$ qsec: num [1:2] 16.5 17 #>   ..$ vs  : num [1:2] 0 0 #>   ..$ am  : num [1:2] 1 1 #>   ..$ gear: num [1:2] 4 4 #>   ..$ carb: num [1:2] 4 4 pal::as_flat_list(nested_list_2) |> str() #> List of 2 #>  $ : int [1:3] 1 2 3 #>  $ : chr \"buried deep\" # ...but you can drop them and thereby flatten custom objects if needed... pal::as_flat_list(nested_list, keep_attrs = FALSE) |> str() #> List of 4 #>  $ : int 1 #>  $ : num 1.1 #>  $ : chr \"2\" #>  $ : tibble [2 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ mpg : num [1:2] 21 21 #>   ..$ cyl : num [1:2] 6 6 #>   ..$ disp: num [1:2] 160 160 #>   ..$ hp  : num [1:2] 110 110 #>   ..$ drat: num [1:2] 3.9 3.9 #>   ..$ wt  : num [1:2] 2.62 2.88 #>   ..$ qsec: num [1:2] 16.5 17 #>   ..$ vs  : num [1:2] 0 0 #>   ..$ am  : num [1:2] 1 1 #>   ..$ gear: num [1:2] 4 4 #>   ..$ carb: num [1:2] 4 4 # ...or retain `xfun_strict_list`s, too pal::as_flat_list(nested_list_2, attrs_to_drop = NULL) |> str() #> List of 2 #>  $ : int [1:3] 1 2 3 #>  $ :List of 1 #>   ..$ :List of 1 #>   .. ..$ :List of 1 #>   .. .. ..$ : chr \"buried deep\" #>   ..- attr(*, \"class\")= chr \"xfun_strict_list\""},{"path":"https://pal.rpkg.dev/dev/reference/as_line_feed_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert control character sequence name to actual character sequence — as_line_feed_chr","title":"Convert control character sequence name to actual character sequence — as_line_feed_chr","text":"Convert control character sequence name actual character sequence","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_line_feed_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert control character sequence name to actual character sequence — as_line_feed_chr","text":"","code":"as_line_feed_chr(eol = c(\"LF\", \"CRLF\", \"CR\", \"LFCR\"))"},{"path":"https://pal.rpkg.dev/dev/reference/as_line_feed_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert control character sequence name to actual character sequence — as_line_feed_chr","text":"eol End line (EOL) control character sequence. One \"LF\" line feed (LF) character (\"\\n\"). standard Unix Unix-like systems (Linux, macOS, *BSD, etc.) default. \"CRLF\" carriage return + line feed (CR+LF) character sequence (\"\\r\\n\"). standard Microsoft Windows, DOS systems. \"CR\" carriage return (CR) character (\"\\r\"). standard classic Mac OS antiquated systems. \"LFCR\" line feed + carriage return (LF+CR) character sequence (\"\\n\\r\"). standard RISC OS exotic systems.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_line_feed_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert control character sequence name to actual character sequence — as_line_feed_chr","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_md_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a character vector to a Markdown list — as_md_list","title":"Convert a character vector to a Markdown list — as_md_list","text":"Convenience wrapper around pander::pandoc.list.return() convert character vector (something coercible ) Markdown list.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a character vector to a Markdown list — as_md_list","text":"","code":"as_md_list(   x,   type = c(\"unordered\", \"ordered\", \"ordered_roman\"),   tight = TRUE,   indent_lvl = 0L,   wrap = NULL )"},{"path":"https://pal.rpkg.dev/dev/reference/as_md_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a character vector to a Markdown list — as_md_list","text":"x R object, e.g. character vector. element x become item resulting Markdown list. type Markdown list type. One \"unordered\" unordered aka bullet list. Corresponds <ul> HTML. \"ordered\" ordered aka numbered list. Corresponds <ol> HTML. \"ordered_roman\" variation ordered/numbered list uppercase roman numerals instead Arabic numerals list markers. tight Whether add additional spacing list items. indent_lvl Level indentation resulting Markdown list. level, four additional spaces added front every list item. integer scalar. wrap optional string wrap list items .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a character vector to a Markdown list — as_md_list","text":"x empty, character vector length zero. Otherwise, character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_md_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a character vector to a Markdown list — as_md_list","text":"","code":"rownames(mtcars) |>   pal::as_md_list() |>   cat() #> * Mazda RX4  #> * Mazda RX4 Wag  #> * Datsun 710  #> * Hornet 4 Drive  #> * Hornet Sportabout  #> * Valiant  #> * Duster 360  #> * Merc 240D  #> * Merc 230  #> * Merc 280  #> * Merc 280C  #> * Merc 450SE  #> * Merc 450SL  #> * Merc 450SLC  #> * Cadillac Fleetwood  #> * Lincoln Continental  #> * Chrysler Imperial  #> * Fiat 128  #> * Honda Civic  #> * Toyota Corolla  #> * Toyota Corona  #> * Dodge Challenger  #> * AMC Javelin  #> * Camaro Z28  #> * Pontiac Firebird  #> * Fiat X1-9  #> * Porsche 914-2  #> * Lotus Europa  #> * Ford Pantera L  #> * Ferrari Dino  #> * Maserati Bora  #> * Volvo 142E"},{"path":"https://pal.rpkg.dev/dev/reference/as_md_val_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List values as a Markdown list — as_md_val_list","title":"List values as a Markdown list — as_md_val_list","text":"Generates Markdown list given values formatted verbatim. Character values additionally wrapped double quotes.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_val_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List values as a Markdown list — as_md_val_list","text":"","code":"as_md_val_list(...)"},{"path":"https://pal.rpkg.dev/dev/reference/as_md_val_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List values as a Markdown list — as_md_val_list","text":"... Values formatted. One R objects.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_val_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List values as a Markdown list — as_md_val_list","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_md_val_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List values as a Markdown list — as_md_val_list","text":"","code":"list(1L, 2.2, \"other\") |>   pal::as_md_val_list() |>   cat() #> * `1`  #> * `2.2`  #> * `\"other\"`     # note that values are flattened before listing them, so this yields the same list list(list(list(1L, list(2.2), list(list(\"other\"))))) |>   pal::as_md_val_list() |>   cat() #> * `1`  #> * `2.2`  #> * `\"other\"`"},{"path":"https://pal.rpkg.dev/dev/reference/as_md_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Format values as verbatim Markdown — as_md_vals","title":"Format values as verbatim Markdown — as_md_vals","text":"Converts given values character vector, formatted verbatim Markdown. Character values additionally wrapped double quotes. Metadata like types attributes input represented output, values.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format values as verbatim Markdown — as_md_vals","text":"","code":"as_md_vals(...)"},{"path":"https://pal.rpkg.dev/dev/reference/as_md_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format values as verbatim Markdown — as_md_vals","text":"... Values formatted. One R objects.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_md_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format values as verbatim Markdown — as_md_vals","text":"character vector.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_md_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format values as verbatim Markdown — as_md_vals","text":"","code":"list(1L, 2.2, \"other\") |>   pal::as_md_vals() #> [1] \"`1`\"         \"`2.2`\"       \"`\\\"other\\\"`\"    # note that values are flattened before further processing them, so this yields the same result list(list(list(1L, list(2.2), list(list(\"other\"))))) |>   pal::as_md_vals() #> [1] \"`1`\"         \"`2.2`\"       \"`\\\"other\\\"`\""},{"path":"https://pal.rpkg.dev/dev/reference/as_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a character scalar (aka string) — as_str","title":"Convert to a character scalar (aka string) — as_str","text":"Similar paste0(..., collapse = \"\"), recursively converts inputs type character.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a character scalar (aka string) — as_str","text":"","code":"as_str(..., sep = \"\", rm_na = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/as_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a character scalar (aka string) — as_str","text":"... R objects assembled single string. Dynamic dots supported. sep Separator delimit .... Defaults none (\"\"). rm_na Exclude missing values. FALSE, missing values represented \"NA\" resulting string.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/as_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a character scalar (aka string) — as_str","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/as_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a character scalar (aka string) — as_str","text":"","code":"library(magrittr)  input <-   paste0(2:4,          collapse = \", \") |>   purrr::map(rep,              times = 20) %>%   list(c(\"This is a glut of \", \"meaningless numbers: \"), .)  # while this just converts `input` in a lazy way... paste0(input,        collapse = \"\") #> [1] \"c(\\\"This is a glut of \\\", \\\"meaningless numbers: \\\")list(c(\\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\", \\\"2, 3, 4\\\"))\"  # ...this one works harder pal::as_str(input) #> [1] \"This is a glut of meaningless numbers: 2, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 4\""},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert object is member of any class — assert_class_any","title":"Assert object is member of any class — assert_class_any","text":"Asserts object member specified classes.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert object is member of any class — assert_class_any","text":"","code":"assert_class_any(x, classes, name = \"x\")"},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert object is member of any class — assert_class_any","text":"x R object test. classes Class names check inheritance. character vector. name Name checked object print error message case assertion fails. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert object is member of any class — assert_class_any","text":"x, invisibly.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assert object is member of any class — assert_class_any","text":"contrast checkmate::assert_class(), function returns TRUE long x least member one classes.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_class_any.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert object is member of any class — assert_class_any","text":"","code":"xml2::read_html(\"https://pal.rpkg.dev/dev/license\") |>   assert_class_any(classes = c(\"xml_document\", \"xml_nodeset\", \"xml_node\"))"},{"path":"https://pal.rpkg.dev/dev/reference/assert_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert CLI tool is available — assert_cli","title":"Assert CLI tool is available — assert_cli","text":"Asserts command-line interface (CLI) tool found system's PATH returns executable's filesystem path.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert CLI tool is available — assert_cli","text":"","code":"assert_cli(   cmd,   error_msg =     paste0(\"The {.strong {cmd}} executable is required but couldn't be found on \",     \"system's {.href [PATH](https://en.wikipedia.org/wiki/PATH_(variable))}.\"),   force_which = FALSE )"},{"path":"https://pal.rpkg.dev/dev/reference/assert_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert CLI tool is available — assert_cli","text":"cmd System command invoke CLI tool. character scalar. error_msg Error message print case cmd found system's PATH. Supports cli's inline markup. character scalar. force_which set TRUE, base::Sys.(), relies system command , used instead command -v determine availability cmd Unix-like systems. Windows, base::Sys.() used case. command -v generally recommended bourne-like shells therefore default Linux, macOS Unixes.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert CLI tool is available — assert_cli","text":"CLI tool available system's PATH, filesystem path, invisibly. Otherwise, error thrown.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_cli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert CLI tool is available — assert_cli","text":"","code":"pal::assert_cli(\"Rscript\")  cmd <- ifelse(xfun::is_windows(), \"pandoc.exe\", \"pandoc\") pal::assert_cli(cmd)"},{"path":"https://pal.rpkg.dev/dev/reference/assert_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert data frame columns — assert_cols","title":"Assert data frame columns — assert_cols","text":"Asserts data frame contains specified columns.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert data frame columns — assert_cols","text":"","code":"assert_cols(   data,   cols = NULL,   strict = FALSE,   obj_name = checkmate::vname(data) )"},{"path":"https://pal.rpkg.dev/dev/reference/assert_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert data frame columns — assert_cols","text":"data Data frame check. cols Column names must present data. character vector NULL. strict Whether additional columns specified cols allowed data. obj_name Name checked object print error messages.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert data frame columns — assert_cols","text":"data, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert data frame columns — assert_cols","text":"","code":"pal::assert_cols(data = mtcars,                  cols = c(\"mpg\", \"disp\"))  try(   pal::assert_cols(data = mtcars,                    cols = c(\"mpg\", \"display\")) ) #> Error in pal::assert_cols(data = mtcars, cols = c(\"mpg\", \"display\")) :  #>   Assertion on 'mtcars' failed: Column names must include the elements {'mpg','display'}, but is missing elements {'display'}.  try(   pal::assert_cols(data = mtcars,                    cols = c(\"mpg\", \"disp\"),                    strict = TRUE) ) #> Error in pal::assert_cols(data = mtcars, cols = c(\"mpg\", \"disp\"), strict = TRUE) :  #>   Assertion on 'mtcars' failed: Column names must be a identical to set {'mpg','disp'}, but is {'mpg','cyl','disp','hp','drat','wt','qsec','vs','am','gear','carb'}.  try(   pal::assert_cols(data = mtcars,                    strict = TRUE) ) #> Error in pal::assert_cols(data = mtcars, strict = TRUE) :  #>   Assertion on 'mtcars' failed: Column names must be a identical to set {}, but is {'mpg','cyl','disp','hp','drat','wt','qsec','vs','am','gear','carb'}."},{"path":"https://pal.rpkg.dev/dev/reference/assert_df_or_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","title":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","text":"Asserts object pkgsnip::param_lbl(id = \"df_or_tibble\", as_sentence = FALSE).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_df_or_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","text":"","code":"assert_df_or_tibble(x, name = \"x\")"},{"path":"https://pal.rpkg.dev/dev/reference/assert_df_or_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","text":"x R object test. name Name checked object print error message case assertion fails. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_df_or_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_df_or_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert object is data frame or tibble (extension) — assert_df_or_tibble","text":"","code":"tibble::tibble() |> pal::assert_df_or_tibble()  try(   matrix() |> pal::assert_df_or_tibble() ) #> Error in assert_class_any(x = x, classes = c(\"data.frame\", \"tbl\", \"tbl_dbi\",  :  #>   `x` must be member of any of the classes \"data.frame\", \"tbl\", \"tbl_dbi\", \"tbl_df\", \"tbl_lazy\" or \"tbl_sql\", but is of classes \"matrix\" and \"array\"."},{"path":"https://pal.rpkg.dev/dev/reference/assert_inf_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert count or Inf — assert_inf_count","title":"Assert count or Inf — assert_inf_count","text":"Asserts x either count positive infinity (Inf).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_inf_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert count or Inf — assert_inf_count","text":"","code":"assert_inf_count(x, ...)"},{"path":"https://pal.rpkg.dev/dev/reference/assert_inf_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert count or Inf — assert_inf_count","text":"x Object check. ... arguments passed checkmate::assert_count().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_inf_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert count or Inf — assert_inf_count","text":"x, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_inf_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert count or Inf — assert_inf_count","text":"","code":"pal::assert_inf_count(1001L) pal::assert_inf_count(1) pal::assert_inf_count(0.0) pal::assert_inf_count(Inf)  try(   pal::assert_inf_count(-1) ) #> Error in pal::assert_inf_count(-1) :  #>   Assertion on 'x' failed: Must be >= 0. try(   pal::assert_inf_count(1.5) ) #> Error in pal::assert_inf_count(1.5) :  #>   Assertion on 'x' failed: Must be of type 'count', not 'double'. try(   pal::assert_inf_count(-Inf) ) #> Error in pal::assert_inf_count(-Inf) :  #>   `x` must either be a single integerish value or positive infinity (`Inf`)."},{"path":"https://pal.rpkg.dev/dev/reference/assert_mime_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert MIME type — assert_mime_type","title":"Assert MIME type — assert_mime_type","text":"Asserts response object specific MIME type. Convenience wrapper around httr::http_type().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_mime_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert MIME type — assert_mime_type","text":"","code":"assert_mime_type(   response,   mime_type,   msg = paste0(\"The response's MIME type is {.val {mime_type_actual}} \",     \"but expected was {.val {mime_type}}.\"),   msg_suffix = \"\" )"},{"path":"https://pal.rpkg.dev/dev/reference/assert_mime_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert MIME type — assert_mime_type","text":"response response object. mime_type Expected MIME type, e.g. \"application/json\". character scalar. msg Message display case error. Supports cli's inline markup. character scalar. msg_suffix Additional string append msg. Supports cli's inline markup.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/assert_mime_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert MIME type — assert_mime_type","text":"response, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/assert_mime_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert MIME type — assert_mime_type","text":"","code":"httr::GET(\"https://api.github.com/users/salim-b\") |> pal::assert_mime_type(\"application/json\")  # an informative error is thrown when the assertion is violated try(   httr::GET(\"https://api.github.com/users/salim-b\") |> pal::assert_mime_type(\"text/plain\") ) #> Error in pal::assert_mime_type(httr::GET(\"https://api.github.com/users/salim-b\"),  :  #>   The response's MIME type is \"application/json\" but expected was \"text/plain\"."},{"path":"https://pal.rpkg.dev/dev/reference/augment_pkg_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment package configuration metadata — augment_pkg_config","title":"Augment package configuration metadata — augment_pkg_config","text":"Augments package's configuration metadata (<pkg>::pkg_config) columns r_opts env_var holding respective R option environment variable names.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/augment_pkg_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment package configuration metadata — augment_pkg_config","text":"","code":"augment_pkg_config(pkg = utils::packageName(env = parent.frame()))"},{"path":"https://pal.rpkg.dev/dev/reference/augment_pkg_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment package configuration metadata — augment_pkg_config","text":"pkg Package name. character scalar. Defaults name calling package.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/augment_pkg_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment package configuration metadata — augment_pkg_config","text":"tibble minimum columns key, default_value, r_opt env_var.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/augment_pkg_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment package configuration metadata — augment_pkg_config","text":"","code":"try(   pal::augment_pkg_config(pkg = \"pkgpurl\") ) #> # A tibble: 3 × 7 #>   key                  default_value default_value_dynamic require description                                                                     r_opt env_var #>   <chr>                <list>        <chr>                 <lgl>   <chr>                                                                           <chr> <chr>   #> 1 add_copyright_notice <lgl [1]>     NA                    TRUE    Whether or not to add a **copyright notice** at the beginning of the generated… pkgp… R_PKGP… #> 2 add_license_notice   <lgl [1]>     NA                    TRUE    Whether or not to add a **license notice** at the beginning of the generated `… pkgp… R_PKGP… #> 3 gen_pkgdown_ref      <lgl [1]>     NA                    TRUE    Whether or not to overwrite [pkgdown](https://pkgdown.r-lib.org/)'s [reference… pkgp… R_PKGP…"},{"path":"https://pal.rpkg.dev/dev/reference/build_readme.html","id":null,"dir":"Reference","previous_headings":"","what":"Build README.Rmd — build_readme","title":"Build README.Rmd — build_readme","text":"simpler, considerably faster alternative devtools::build_readme() since install package temporary library building README.Rmd. pleasant side effect , latter function, also works .Rmd files part R package.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/build_readme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build README.Rmd — build_readme","text":"","code":"build_readme(   input = \"README.Rmd\",   output = \"README.md\",   build_index_md = NULL,   env = parent.frame(),   clean = TRUE,   quiet = FALSE )"},{"path":"https://pal.rpkg.dev/dev/reference/build_readme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build README.Rmd — build_readme","text":"input Path R Markdown README file built. character scalar. output Path built Markdown README. character scalar. build_index_md Whether build separate pkgdown-optimized pkgdown/index.md alongside output (.e. parent directory). NULL, built parent directory output contains pkgdown configuration file. Note built R option pal.build_readme.is_pkgdown set TRUE, allowing conditional content inclusion input – e.g. via code chunk option eval = isTRUE(getOption(\"pal.build_readme.is_pkgdown\")). env Environment code chunks evaluated, e.g. base::parent.frame(), base::new.env(), base::globalenv(). clean Whether delete intermediate files created rmarkdown::render(). quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/build_readme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build README.Rmd — build_readme","text":"path input character scalar, invisibly.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/build_readme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build README.Rmd — build_readme","text":"Note public package repositories, recommended use devtools::build_readme() since ensures README.Rmd can built reproducibly, means objects files references must accessible repository. function registered RStudio add-, allowing RStudio users assign custom shortcut invoke command palette.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/capitalize_first.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize first letter — capitalize_first","title":"Capitalize first letter — capitalize_first","text":"Converts input character vector, first letter element uppercased.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capitalize_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize first letter — capitalize_first","text":"","code":"capitalize_first(x)"},{"path":"https://pal.rpkg.dev/dev/reference/capitalize_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize first letter — capitalize_first","text":"x Input capitalize first letter, typically character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capitalize_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize first letter — capitalize_first","text":"character vector length x.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/capitalize_first.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize first letter — capitalize_first","text":"","code":"pal::capitalize_first(c(\"one\", \"Two\", \"tHREE\")) #> [1] \"One\"   \"Two\"   \"THREE\""},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture printed console output as string — capture_print","title":"Capture printed console output as string — capture_print","text":"Returns print(x) output console – collapse set anything NULL, character scalar (.e. string), otherwise character vector output lines.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture printed console output as string — capture_print","text":"","code":"capture_print(x, collapse = NULL)"},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture printed console output as string — capture_print","text":"x R object output print() captured. collapse Optional string concatenating results. NULL, character vector print lines returned.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture printed console output as string — capture_print","text":"character vector collapse = NULL, otherwise character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture printed console output as string — capture_print","text":"simple convenience wrapper around utils::capture.output(). Note ANSI escape sequences (e.g. output print() methods tidyverse packages) included result. remove , use cli::ansi_strip().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/capture_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture printed console output as string — capture_print","text":"","code":"mtcars |> pal::capture_print() #>  [1] \"                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\" \"Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\" #>  [3] \"Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\" \"Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\" #>  [5] \"Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\" \"Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\" #>  [7] \"Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\" \"Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\" #>  [9] \"Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\" \"Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\" #> [11] \"Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\" \"Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\" #> [13] \"Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\" \"Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\" #> [15] \"Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\" \"Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\" #> [17] \"Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\" \"Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\" #> [19] \"Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\" \"Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\" #> [21] \"Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\" \"Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\" #> [23] \"Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\" \"AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\" #> [25] \"Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\" \"Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\" #> [27] \"Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\" \"Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\" #> [29] \"Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\" \"Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\" #> [31] \"Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\" \"Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\" #> [33] \"Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\" mtcars |> pal::capture_print(collapse = \"\\n\") |> cat() #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # to strip ANSI escape sequences, use `cli::ansi_strip()` mtcars |> tibble::as_tibble() #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  mtcars |>   tibble::as_tibble() |>   pal::capture_print(collapse = \"\\n\") |>   cli::ansi_strip() |>   cat() #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows"},{"path":"https://pal.rpkg.dev/dev/reference/cat_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to character vector and print newline-separated — cat_lines","title":"Convert to character vector and print newline-separated — cat_lines","text":"Convenience wrapper around as_chr() base::cat(), mainly intended interactive use.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cat_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to character vector and print newline-separated — cat_lines","text":"","code":"cat_lines(...)"},{"path":"https://pal.rpkg.dev/dev/reference/cat_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to character vector and print newline-separated — cat_lines","text":"... R object(s) convert character print. Dynamic dots supported.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cat_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to character vector and print newline-separated — cat_lines","text":"None (invisible NULL).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/cat_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to character vector and print newline-separated — cat_lines","text":"","code":"fs::path_package(package = \"pal\",                  \"rstudio\", \"addins.dcf\") |>   readr::read_lines() |>   pal::cat_lines() #> Name: Build `README.Rmd` #> Description: Executes `pal::build_readme()`. #> Binding: build_readme #> Interactive: false  # conversion to type character, recursive vs. non-recursive to_convert <- list(tibble::tibble(a = 1:3), \"A\", factor(\"wonderful\"), xfun::strict_list(\"day\"))  to_convert |> pal::cat_lines() #> 1 #> 2 #> 3 #> A #> wonderful #> day to_convert |> cli::cat_line() #> list(a = 1:3) #> A #> 1 #> list(\"day\")"},{"path":"https://pal.rpkg.dev/dev/reference/check_dots_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all named dots arguments are valid — check_dots_named","title":"Check that all named dots arguments are valid — check_dots_named","text":"Ensures dots ... either empty (.empty_ok = TRUE), named elements dots valid subset .fn's parameter names. case invalid .forbidden argument, informative message shown defined .action taken.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/check_dots_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all named dots arguments are valid — check_dots_named","text":"","code":"check_dots_named(   ...,   .fn,   .additional = NULL,   .forbidden = NULL,   .empty_ok = TRUE,   .action = c(\"abort\", \"warn\", \"inform\") )"},{"path":"https://pal.rpkg.dev/dev/reference/check_dots_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all named dots arguments are valid — check_dots_named","text":"... Dots argument check. .fn Function ... passed . .additional Parameter names within ... treated valid addition .fn's actual parameter names. character vector. .forbidden Parameter names within ... treated invalid. precedence .additional. character vector. .empty_ok Set TRUE empty ... allowed, FALSE otherwise. .action Action take check fails. One \"abort\", \"warn\" \"inform\"","code":""},{"path":"https://pal.rpkg.dev/dev/reference/check_dots_named.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that all named dots arguments are valid — check_dots_named","text":"check_dots_named() intended combat second one two major downsides using ... usually brings. chapter 6.6 book Advanced R phrased follows: Using ... comes two downsides: use pass arguments another function, carefully explain user arguments go. makes hard understand can functions like lapply() plot(). misspelled argument raise error. makes easy typos go unnoticed.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/check_dots_named.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all named dots arguments are valid — check_dots_named","text":"","code":"# We can use `check_dots_named()` to address this second downside: sum_safe <- function(...,                      na.rm = FALSE) {   pal::check_dots_named(...,                         .fn = sum)   sum(...,       na.rm = na.rm) }  # Note how the misspelled `na_rm` (instead of `na.rm`) silently gets ignored in the original # function, sum(1, 2, NA, na_rm = TRUE) #> [1] NA  # whereas our safe version properly errors: try(   sum_safe(1, 2, NA, na_rm = TRUE) ) #> Error in map(.x, .f, ..., .progress = .progress) :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Invalid named argument provided in `...`: `na_rm` #> ℹ Valid named arguments for `sum()` include: `na.rm` #> → Did you mean `na.rm`?  # We can even build an `sapply()` function that fails \"intelligently\": sapply_safe <- function(X,                         FUN,                         ...,                         simplify = TRUE,                         USE.NAMES = TRUE) {   pal::check_dots_named(...,                         .fn = FUN)   sapply(X = X,          FUN = FUN,          ...,          simplify = TRUE,          USE.NAMES = TRUE) }  # While the original `sapply()` silently consumes misspelled named arguments via `...`, sapply(1:5, paste, \"hour workdays\", sep = \"-\", colaspe = \" \") #> [1] \"1-hour workdays- \" \"2-hour workdays- \" \"3-hour workdays- \" \"4-hour workdays- \" \"5-hour workdays- \"  # `sapply_safe()` will throw an informative error message: try(   sapply_safe(1:5, paste, \"hour workdays\", sep = \"-\", colaspe = \" \") ) #> Error in map(.x, .f, ..., .progress = .progress) :  #>   ℹ In index: 2. #> Caused by error in `.f()`: #> ! Invalid named argument provided in `...`: `colaspe` #> ℹ Valid named arguments for `paste()` include: `sep`, `collapse`, and `recycle0` #> → Did you mean `collapse`?  # But be aware that `check_dots_named()` might be a bit rash, try(   sum_safe(a = 1, b = 2) ) #> Error in map(.x, .f, ..., .progress = .progress) :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Invalid named argument provided in `...`: `a` #> ℹ Valid named arguments for `sum()` include: `na.rm`  # while the original function actually has nothing to complain: sum(a = 1, b = 2) #> [1] 3  # Furthermore, it doesn't play nicely with generics that don't expose all of the argument names # of the method that is eventually invoked (`to` and `by` in the case of `seq()` -> `seq.int()`): try(   sapply_safe(X = c(0,50),               FUN = seq,               to = 100,               by = 5) ) #> Error in map(.x, .f, ..., .progress = .progress) :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Invalid named argument provided in `...`: `to` #> ℹ Only unnamed arguments are valid for `seq()`.  # To work around this, directly supply the proper method (`seq.int`), sapply_safe(X = c(0,50),             FUN = seq.int,             to = 100,             by = 5) #> [[1]] #>  [1]   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 #>  #> [[2]] #>  [1]  50  55  60  65  70  75  80  85  90  95 100 #>   # or just provide `to` and `by` *unnamed*: sapply_safe(X = c(0,50),             FUN = seq,             100,             5) #> [[1]] #>  [1]   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100 #>  #> [[2]] #>  [1]  50  55  60  65  70  75  80  85  90  95 100 #>"},{"path":"https://pal.rpkg.dev/dev/reference/cli_process_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression with cli process indication — cli_process_expr","title":"Evaluate an expression with cli process indication — cli_process_expr","text":"function superseded favor cli_progress_step_quick() underlying cli::cli_progress_* family functions powerful versatile cli::cli_process_* family cli_process_expr() built.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_process_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression with cli process indication — cli_process_expr","text":"","code":"cli_process_expr(   expr,   msg,   msg_done = paste(msg, \"... done\"),   msg_failed = paste(msg, \"... failed\"),   msg_class = \"alert-info\",   done_class = \"alert-success\",   failed_class = \"alert-danger\",   env = parent.frame() )"},{"path":"https://pal.rpkg.dev/dev/reference/cli_process_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression with cli process indication — cli_process_expr","text":"expr expression evaluated. msg message show indicate start process computation. collapsed single string, first line kept cut console_width(). msg_done message use successful termination. msg_failed message use unsuccessful termination. msg_class style class add message. Use empty string suppress styling. done_class style class add successful termination message. Use empty string suppress styling.failed_class style class add unsuccessful termination message. Use empty string suppress styling.env Default environment evaluate expr, well possible glue expressions within msg, .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_process_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression with cli process indication — cli_process_expr","text":"result evaluated expr, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/cli_process_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an expression with cli process indication — cli_process_expr","text":"","code":"if (interactive()) {   pal::cli_process_expr(Sys.sleep(3L), \"Zzzz\") }  russian_roulette <- function() {   msg <- \"Spinning the cylinder \\U0001F91E … \"   pal::cli_process_expr(msg = msg,                         msg_done = paste0(msg, \"and pulling the trigger – lucky again. \\U0001F60C\"),                         msg_failed = paste0(msg, \"and pulling the trigger – head blast!\"),                         expr = {                           if (interactive()) Sys.sleep(1)                           if (runif(1L) < 0.4) stop(\"\\U0001F92F\\u2620\")                         }) }  set.seed(321) russian_roulette() #> ℹ Spinning the cylinder 🤞 …  #> ✔ Spinning the cylinder 🤞 … and pulling the trigger – lucky again. 😌 #>  set.seed(123) try(russian_roulette()) #> ℹ Spinning the cylinder 🤞 …  #> ✖ Spinning the cylinder 🤞 … and pulling the trigger – head blast! #>  #> Error in rlang::eval_tidy(expr = { : 🤯☠"},{"path":"https://pal.rpkg.dev/dev/reference/cli_progress_step_quick.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick cli simplified progress message — cli_progress_step_quick","title":"Quick cli simplified progress message — cli_progress_step_quick","text":"Version cli::cli_progress_step() messages (un)successful termination simply appends done/failed msg.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_progress_step_quick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick cli simplified progress message — cli_progress_step_quick","text":"","code":"cli_progress_step_quick(   msg,   spinner = FALSE,   class = if (!spinner) \".alert-info\",   current = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"https://pal.rpkg.dev/dev/reference/cli_progress_step_quick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick cli simplified progress message — cli_progress_step_quick","text":"msg Message show. may contain glue substitution cli styling. can updated via cli_progress_update(), usual. style cli info alert (see cli_alert_info()). spinner Whether show spinner beginning line. make spinner spin, need call cli_progress_update() regularly. class cli class add message. default class steps spinner. current Whether use progress bar current progress bar calling function. See 'current progress bar' . .auto_close Whether terminate progress bar calling function (one execution environment .envir exits. (Auto termination work progress bars created global environment, e.g. script.) .envir environment use auto-termination glue substitution. also used find set current progress bar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_progress_step_quick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick cli simplified progress message — cli_progress_step_quick","text":"cli progress bar id character scalar, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/cli_progress_step_quick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick cli simplified progress message — cli_progress_step_quick","text":"","code":"{   pal::cli_progress_step_quick(msg = \"Doing my thing\")   Sys.sleep(1)   cli::cli_progress_done() } #> ℹ Doing my thing… #> ✔ Doing my thing… done [1s] #>"},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"cli pluralization helpers for booleans — cli_qty_lgl","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"Equivalents cli::qty() cli::() logical input.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"","code":"cli_qty_lgl(cnd)  cli_no_lgl(cnd)"},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"cnd Condition. logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"0L 1L additional class cli_noprint.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"cnd evaluates TRUE, resulting cli quantity 1, otherwise 0. See cli's pluralization rules details quantities interpreted.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/cli_qty_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cli pluralization helpers for booleans — cli_qty_lgl","text":"","code":"cnd <- runif(1L) < 0.5  cli::pluralize(paste0(   \"{pal::cli_qty_lgl(cnd)}I think this function \",   \"{?comes in handy/is not worth a second of my attention}. Having looked at the rest of the \",   \"package, this {?is quite surprising/does not come as a surprise}.\" )) #> I think this function is not worth a second of my attention. Having looked at the rest of the package, this does not come as a surprise.  cli::pluralize(\"This function is worth exactly {pal::cli_no_lgl(cnd)} second of my time.\") #> This function is worth exactly no second of my time."},{"path":"https://pal.rpkg.dev/dev/reference/cols_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create readr column specification using regular expression matching — cols_regex","title":"Create readr column specification using regular expression matching — cols_regex","text":"Allows define regular expression per desired column specification object matching respective column names.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cols_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create readr column specification using regular expression matching — cols_regex","text":"","code":"cols_regex(..., .col_names, .default = readr::col_character())"},{"path":"https://pal.rpkg.dev/dev/reference/cols_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create readr column specification using regular expression matching — cols_regex","text":"... Named arguments names (Perl-compatible) regular expressions values column objects created col_*(), abbreviated character names (described col_types parameter readr::read_delim()). Dynamic dots supported. .col_names Column names matched .... .default named columns matched regular expressions ... read column type.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cols_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create readr column specification using regular expression matching — cols_regex","text":"column specification.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/cols_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create readr column specification using regular expression matching — cols_regex","text":"","code":"library(magrittr)  # for some hypothetical CSV data column names like these... col_names <- c(\"VAR1_Text\",                \"VAR2_Text\",                \"VAR3_Text_Other\",                \"VAR1_Code_R1\",                \"VAR2_Code_R2\",                \"HAS_R1_Lag\",                \"HAS_R2_Lag\",                \"GARBAGEX67\",                \"GARBAGEY09\")  # ...a column spec could be created concisely as follows: col_regex <- list(\"_Text(_|$)\" = \"c\",                   \"_Code(_|$)\" = \"i\",                   \"^GARBAGE\"  = readr::col_skip())  pal::cols_regex(.col_names = col_names,                 !!!col_regex,                 .default     = \"l\") #> cols( #>   .default = col_logical(), #>   VAR1_Text = col_character(), #>   VAR2_Text = col_character(), #>   VAR3_Text_Other = col_character(), #>   VAR1_Code_R1 = col_integer(), #>   VAR2_Code_R2 = col_integer(), #>   GARBAGEX67 = col_skip(), #>   GARBAGEY09 = col_skip() #> )  # we can parse some real data: raw_data <-   httr::GET(paste0(\"http://www.web.statistik.zh.ch/ogd/data/\",                    \"KANTON_ZUERICH_nrw_2019_listen_ergebnisse_gemeinde.csv\")) |>   httr::content(as = \"text\",                 encoding = \"UTF-8\")  readr::read_csv(file = raw_data,                 col_types = pal::cols_regex(\"^(Gemeindenamen|Partei)$\" = \"c\",                                             \"(?i)anteil\" = \"d\",                                             .default = \"i\",                                             .col_names = pal::dsv_colnames(raw_data))) #> Warning: One or more parsing issues, call `problems()` on your data frame for details, e.g.: #>   dat <- vroom(...) #>   problems(dat) #> # A tibble: 6 × 1 #>   `<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">` #>                                                  <int> #> 1                                                   NA #> 2                                                   NA #> 3                                                   NA #> 4                                                   NA #> 5                                                   NA #> 6                                                   NA  # an alternative way to process the same data using `readr::type_convert()`: readr::read_csv(file = raw_data,                 col_types = list(.default = \"c\")) %>%   readr::type_convert(col_types = pal::cols_regex(\"^(Gemeindenamen|Partei)$\" = \"c\",                                                   \"(?i)anteil\" = \"d\",                                                   .default = \"i\",                                                   .col_names = colnames(.))) #> Warning: [0, 1]: expected no trailing characters, but got '<html><head>' #> Warning: [1, 1]: expected no trailing characters, but got '<title>404 Not Found<\/title>' #> Warning: [2, 1]: expected no trailing characters, but got '<\/head><body>' #> Warning: [3, 1]: expected no trailing characters, but got '<h1>Not Found<\/h1>' #> Warning: [4, 1]: expected no trailing characters, but got '<p>The requested URL was not found on this server.<\/p>' #> Warning: [5, 1]: expected no trailing characters, but got '<\/body><\/html>' #> # A tibble: 6 × 1 #>   `<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">` #>                                                  <int> #> 1                                                   NA #> 2                                                   NA #> 3                                                   NA #> 4                                                   NA #> 5                                                   NA #> 6                                                   NA"},{"path":"https://pal.rpkg.dev/dev/reference/desc_dep_vrsn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","title":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","text":"Returns version specified pkg dependency DESCRIPTION file.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_dep_vrsn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","text":"","code":"desc_dep_vrsn(   pkg,   file = \".\",   types = c(\"Imports\", \"Depends\", \"Suggests\", \"Enhances\", \"LinkingTo\") )"},{"path":"https://pal.rpkg.dev/dev/reference/desc_dep_vrsn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","text":"pkg Package name. character scalar. Defaults name calling package. file DESCRIPTION file use. default DESCRIPTION file current package (.e. package working directory part ) used. types Dependency types considered. pkg listed multiple dependency types, maximally required version returned.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_dep_vrsn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","text":"numeric version.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/desc_dep_vrsn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dependency version from DESCRIPTION file — desc_dep_vrsn","text":"","code":"fs::path_package(package = \"dplyr\") |> pal::desc_dep_vrsn(pkg = \"tibble\") #> [1] ‘3.2.0’"},{"path":"https://pal.rpkg.dev/dev/reference/desc_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all DESCRIPTION file fields as cleaned up list — desc_list","title":"Get all DESCRIPTION file fields as cleaned up list — desc_list","text":"Returns fields DESCRIPTION file named list values cleaned : Whitespaces start end field values well repeated whitespaces within removed. Multi-value fields returned vectors. fields Depends, Imports Suggests returned single data frame named dependencies.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all DESCRIPTION file fields as cleaned up list — desc_list","text":"","code":"desc_list(file = \".\")"},{"path":"https://pal.rpkg.dev/dev/reference/desc_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all DESCRIPTION file fields as cleaned up list — desc_list","text":"file DESCRIPTION file use. default DESCRIPTION file current package (.e. package working directory part ) used.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all DESCRIPTION file fields as cleaned up list — desc_list","text":"list.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/desc_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all DESCRIPTION file fields as cleaned up list — desc_list","text":"","code":"fs::path_package(package = \"dplyr\") |> pal::desc_list() #> $Type #> [1] \"Package\" #>  #> $Package #> [1] \"dplyr\" #>  #> $Title #> [1] \"A Grammar of Data Manipulation\" #>  #> $Version #> [1] \"1.1.4\" #>  #> $Description #> [1] \"A fast, consistent tool for working with data frame like objects, both in memory and out of memory.\" #>  #> $License #> [1] \"MIT + file LICENSE\" #>  #> $BugReports #> [1] \"https://github.com/tidyverse/dplyr/issues\" #>  #> $VignetteBuilder #> [1] \"knitr\" #>  #> $`Config/Needs/website` #> [1] \"tidyverse, shiny, pkgdown, tidyverse/tidytemplate\" #>  #> $`Config/testthat/edition` #> [1] \"3\" #>  #> $Encoding #> [1] \"UTF-8\" #>  #> $LazyData #> [1] \"true\" #>  #> $RoxygenNote #> [1] \"7.2.3\" #>  #> $NeedsCompilation #> [1] \"yes\" #>  #> $Packaged #> [1] \"2023-11-16 21:48:56 UTC; hadleywickham\" #>  #> $Author #> [1] \"Hadley Wickham [aut, cre] (<https://orcid.org/0000-0003-4757-117X>), Romain François [aut] (<https://orcid.org/0000-0002-2444-4226>), Lionel Henry [aut], Kirill Müller [aut] (<https://orcid.org/0000-0002-1416-3412>), Davis Vaughan [aut] (<https://orcid.org/0000-0003-4777-038X>), Posit Software, PBC [cph, fnd]\" #>  #> $Maintainer #> [1] \"Hadley Wickham <hadley@posit.co>\" #>  #> $Repository #> [1] \"RSPM\" #>  #> $`Date/Publication` #> [1] \"2023-11-17 16:50:02 UTC\" #>  #> $Built #> [1] \"R 4.3.0; x86_64-pc-linux-gnu; 2023-11-20 11:24:11 UTC; unix\" #>  #> $`Authors@R` #> [1] \"Hadley Wickham <hadley@posit.co> [aut, cre] (<https://orcid.org/0000-0003-4757-117X>)\" #> [2] \"Romain François [aut] (<https://orcid.org/0000-0002-2444-4226>)\"                       #> [3] \"Lionel Henry [aut]\"                                                                    #> [4] \"Kirill Müller [aut] (<https://orcid.org/0000-0002-1416-3412>)\"                         #> [5] \"Davis Vaughan <davis@posit.co> [aut] (<https://orcid.org/0000-0003-4777-038X>)\"        #> [6] \"Posit Software, PBC [cph, fnd]\"                                                        #>  #> $dependencies #>        type        package  version #> 1   Depends              R >= 3.5.0 #> 2   Imports            cli >= 3.4.0 #> 3   Imports       generics        * #> 4   Imports           glue >= 1.3.2 #> 5   Imports      lifecycle >= 1.0.3 #> 6   Imports       magrittr   >= 1.5 #> 7   Imports        methods        * #> 8   Imports         pillar >= 1.9.0 #> 9   Imports             R6        * #> 10  Imports          rlang >= 1.1.0 #> 11  Imports         tibble >= 3.2.0 #> 12  Imports     tidyselect >= 1.2.0 #> 13  Imports          utils        * #> 14  Imports          vctrs >= 0.6.4 #> 15 Suggests          bench        * #> 16 Suggests          broom        * #> 17 Suggests          callr        * #> 18 Suggests           covr        * #> 19 Suggests            DBI        * #> 20 Suggests         dbplyr >= 2.2.1 #> 21 Suggests        ggplot2        * #> 22 Suggests          knitr        * #> 23 Suggests         Lahman        * #> 24 Suggests         lobstr        * #> 25 Suggests microbenchmark        * #> 26 Suggests   nycflights13        * #> 27 Suggests          purrr        * #> 28 Suggests      rmarkdown        * #> 29 Suggests         RMySQL        * #> 30 Suggests    RPostgreSQL        * #> 31 Suggests        RSQLite        * #> 32 Suggests        stringi >= 1.7.6 #> 33 Suggests       testthat >= 3.1.5 #> 34 Suggests          tidyr >= 1.3.0 #> 35 Suggests          withr        * #>  #> $URL #> [1] \"https://dplyr.tidyverse.org\"        \"https://github.com/tidyverse/dplyr\" #>"},{"path":"https://pal.rpkg.dev/dev/reference/desc_url_git.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Git repository URL from DESCRIPTION file — desc_url_git","title":"Get the Git repository URL from DESCRIPTION file — desc_url_git","text":"Returns first Git repository URL found URL (preferred) BugReports fields DESCRIPTION file.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_url_git.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Git repository URL from DESCRIPTION file — desc_url_git","text":"","code":"desc_url_git(file = \".\")"},{"path":"https://pal.rpkg.dev/dev/reference/desc_url_git.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Git repository URL from DESCRIPTION file — desc_url_git","text":"file DESCRIPTION file use. default DESCRIPTION file current package (.e. package working directory part ) used.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_url_git.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Git repository URL from DESCRIPTION file — desc_url_git","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_url_git.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Git repository URL from DESCRIPTION file — desc_url_git","text":"Currently, function recognizes GitLab, GitHub, Gitea, Codeberg, Pagure, Bitbucket SourceHut repository URLs.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"Returns value DESCRIPTION file field (aka key). Whitespaces start end value well repeated whitespaces within removed.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"","code":"desc_value(   key,   file = \".\",   default = glue::glue(\"<No `{key}` field set in DESCRIPTION!>\") )"},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"key field query. file DESCRIPTION file use. default DESCRIPTION file current package (.e. package working directory part ) used. default Default value return key found.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"function slightly modified version desc::desc_get_field() allows default parameter dependent key parameter. default, following string returned key = \"NoRealKey\" found:   rather want take action like throwing error, recommended call desc::desc_get_field() directly.","code":"\"<No `NoRealKey` field set in DESCRIPTION!>\""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/desc_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get value from DESCRIPTION file field, cleaned up and with dynamic fallback — desc_value","text":"","code":"pal::desc_value(key = \"Description\",                 file = fs::path_package(\"pal\")) #> [1] \"A collection of convenience/utility functions complementing base R and the tidyverse.\""},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw path tree — draw_path_tree","title":"Draw path tree — draw_path_tree","text":"Pretty-prints character vector hierarchical paths tree. Uses Unicode box drawing characters draw nesting structure.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw path tree — draw_path_tree","text":"","code":"draw_path_tree(paths, quiet = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw path tree — draw_path_tree","text":"paths character vector paths returned flatten_path_tree() fs::dir_ls(). quiet Whether suppress drawing directory tree.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw path tree — draw_path_tree","text":"paths, invisibly.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw path tree — draw_path_tree","text":"function equivalent fs::dir_tree() artificial/fictional path hierarchy. print tree actual filesystem path hierarchy, recommended rely fs::dir_tree() additionally colorizes output based real filesystem information. Apart , algorithm draw tree .","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/draw_path_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw path tree — draw_path_tree","text":"","code":"# using an artificial/fictional path hierarchy list(\"root_dir\" = list(\"subdir1\",                        \"subdir2\" = list(\"file1.ext\"),                        \"file2.ext\")) |>   pal::flatten_path_tree() |>   pal::draw_path_tree() #> root_dir #> ├── subdir1 #> ├── subdir2 #> │   └── file1.ext #> └── file2.ext  # using an actual path hierarchy fs::path_package(\"dplyr\") |>   fs::dir_ls(recurse = TRUE) |>   pal::draw_path_tree() #> /home/salim/.software/managed/r/dplyr #> ├── DESCRIPTION #> ├── INDEX #> ├── LICENSE #> ├── Meta #> │   ├── Rd.rds #> │   ├── data.rds #> │   ├── features.rds #> │   ├── hsearch.rds #> │   ├── links.rds #> │   ├── nsInfo.rds #> │   ├── package.rds #> │   └── vignette.rds #> ├── NAMESPACE #> ├── NEWS.md #> ├── R #> │   ├── dplyr #> │   ├── dplyr.rdb #> │   └── dplyr.rdx #> ├── data #> │   ├── Rdata.rdb #> │   ├── Rdata.rds #> │   └── Rdata.rdx #> ├── doc #> │   ├── base.R #> │   ├── base.Rmd #> │   ├── base.html #> │   ├── colwise.R #> │   ├── colwise.Rmd #> │   ├── colwise.html #> │   ├── dplyr.R #> │   ├── dplyr.Rmd #> │   ├── dplyr.html #> │   ├── grouping.R #> │   ├── grouping.Rmd #> │   ├── grouping.html #> │   ├── in-packages.R #> │   ├── in-packages.Rmd #> │   ├── in-packages.html #> │   ├── index.html #> │   ├── programming.R #> │   ├── programming.Rmd #> │   ├── programming.html #> │   ├── rowwise.R #> │   ├── rowwise.Rmd #> │   ├── rowwise.html #> │   ├── two-table.R #> │   ├── two-table.Rmd #> │   ├── two-table.html #> │   ├── window-functions.R #> │   ├── window-functions.Rmd #> │   └── window-functions.html #> ├── help #> │   ├── AnIndex #> │   ├── aliases.rds #> │   ├── dplyr.rdb #> │   ├── dplyr.rdx #> │   ├── figures #> │   │   ├── lifecycle-archived.svg #> │   │   ├── lifecycle-defunct.svg #> │   │   ├── lifecycle-deprecated.svg #> │   │   ├── lifecycle-experimental.svg #> │   │   ├── lifecycle-maturing.svg #> │   │   ├── lifecycle-questioning.svg #> │   │   ├── lifecycle-retired.svg #> │   │   ├── lifecycle-soft-deprecated.svg #> │   │   ├── lifecycle-stable.svg #> │   │   ├── lifecycle-superseded.svg #> │   │   └── logo.png #> │   └── paths.rds #> ├── html #> │   ├── 00Index.html #> │   └── R.css #> └── libs #>     └── dplyr.so  # to get colorized output, use `fs::dir_tree()` instead fs::path_package(\"dplyr\") |> fs::dir_tree() #> /home/salim/.software/managed/r/dplyr #> ├── DESCRIPTION #> ├── INDEX #> ├── LICENSE #> ├── Meta #> │   ├── Rd.rds #> │   ├── data.rds #> │   ├── features.rds #> │   ├── hsearch.rds #> │   ├── links.rds #> │   ├── nsInfo.rds #> │   ├── package.rds #> │   └── vignette.rds #> ├── NAMESPACE #> ├── NEWS.md #> ├── R #> │   ├── dplyr #> │   ├── dplyr.rdb #> │   └── dplyr.rdx #> ├── data #> │   ├── Rdata.rdb #> │   ├── Rdata.rds #> │   └── Rdata.rdx #> ├── doc #> │   ├── base.R #> │   ├── base.Rmd #> │   ├── base.html #> │   ├── colwise.R #> │   ├── colwise.Rmd #> │   ├── colwise.html #> │   ├── dplyr.R #> │   ├── dplyr.Rmd #> │   ├── dplyr.html #> │   ├── grouping.R #> │   ├── grouping.Rmd #> │   ├── grouping.html #> │   ├── in-packages.R #> │   ├── in-packages.Rmd #> │   ├── in-packages.html #> │   ├── index.html #> │   ├── programming.R #> │   ├── programming.Rmd #> │   ├── programming.html #> │   ├── rowwise.R #> │   ├── rowwise.Rmd #> │   ├── rowwise.html #> │   ├── two-table.R #> │   ├── two-table.Rmd #> │   ├── two-table.html #> │   ├── window-functions.R #> │   ├── window-functions.Rmd #> │   └── window-functions.html #> ├── help #> │   ├── AnIndex #> │   ├── aliases.rds #> │   ├── dplyr.rdb #> │   ├── dplyr.rdx #> │   ├── figures #> │   │   ├── lifecycle-archived.svg #> │   │   ├── lifecycle-defunct.svg #> │   │   ├── lifecycle-deprecated.svg #> │   │   ├── lifecycle-experimental.svg #> │   │   ├── lifecycle-maturing.svg #> │   │   ├── lifecycle-questioning.svg #> │   │   ├── lifecycle-retired.svg #> │   │   ├── lifecycle-soft-deprecated.svg #> │   │   ├── lifecycle-stable.svg #> │   │   ├── lifecycle-superseded.svg #> │   │   └── logo.png #> │   └── paths.rds #> ├── html #> │   ├── 00Index.html #> │   └── R.css #> └── libs #>     └── dplyr.so"},{"path":"https://pal.rpkg.dev/dev/reference/dsv_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column names of a delimiter-separated string — dsv_colnames","title":"Get column names of a delimiter-separated string — dsv_colnames","text":"Returns column names string delimiter-separated-value format like CSV TSV.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/dsv_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column names of a delimiter-separated string — dsv_colnames","text":"","code":"dsv_colnames(x, delim = \",\", quote = \"\\\"\")"},{"path":"https://pal.rpkg.dev/dev/reference/dsv_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column names of a delimiter-separated string — dsv_colnames","text":"x Delimiter-separated string. character scalar. delim Single character used separate fields within x. quote Single character used quote strings within x. Set NULL none.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/dsv_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get column names of a delimiter-separated string — dsv_colnames","text":"character vector column names.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/dsv_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get column names of a delimiter-separated string — dsv_colnames","text":"","code":"# \\donttest{ httr::GET(\"https://raw.githubusercontent.com/tidyverse/readr/master/inst/extdata/mtcars.csv\") |>   httr::content(as = \"text\") |>   pal::dsv_colnames()# } #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\""},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate function's default parameter values — enum_fn_param_defaults","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"Convenience function combining fn_param_defaults(), wrap_chr() cli::ansi_collapse().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"","code":"enum_fn_param_defaults(   param,   fn = sys.function(sys.parent()),   env = parent.frame(),   wrap = \"`\",   sep2 = \" or \",   last = sep2,   ... )"},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"param Parameter name. character scalar. fn function function name (searched env). See base::formals() details. env Environment fn defined . See base::formals() details. wrap Character sequence default parameter values wrapped . character vector something coercible . sep2, last Passed cli::ansi_collapse(). ... arguments passed cli::ansi_collapse().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"function can convenient avoid duplication roxygen2 documentation leveraging inline R code evaluation follows:","code":"#' @param some_param Some parameter. One of #'   `r pal::enum_fn_param_defaults(param = \"some_param\", fn = \"some_fn\")`. #' some_fn <- function(some_param = c(\"a\", \"b\", \"c\")) {   some_param <- rlang::arg_match(some_param)   ... }"},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/enum_fn_param_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate function's default parameter values — enum_fn_param_defaults","text":"","code":"pal::enum_fn_param_defaults(param = \".name_repair\",                             fn = tibble::as_tibble) |>   cat() #> `\"check_unique\"`, `\"unique\"`, `\"universal\"` or `\"minimal\"`"},{"path":"https://pal.rpkg.dev/dev/reference/enum_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate vector's elements as string — enum_str","title":"Enumerate vector's elements as string — enum_str","text":"Takes vector list enumerates elements single string. Convenience function combining wrap_chr() cli::ansi_collapse() slightly differing defaults (last defaults value sep2).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/enum_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate vector's elements as string — enum_str","text":"","code":"enum_str(   x,   sep = \", \",   sep2 = \" and \",   last = sep2,   trunc = Inf,   width = Inf,   ellipsis = cli::symbol$ellipsis,   style = c(\"both-ends\", \"head\"),   wrap = \"\" )"},{"path":"https://pal.rpkg.dev/dev/reference/enum_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate vector's elements as string — enum_str","text":"x Character vector, object .character() method collapse. sep Separator. character string. sep2 Separator special case x contains two elements. character string. last Last separator, truncation. E.g. use \", \" serial comma. character string. trunc Maximum number elements show. style = \"head\" least trunc = 1 used. style = \"-ends\" least trunc = 5 used, even smaller number specified. width Limit display width result, characters. hard limit, output never exceed . argument implemented \"-ends\" style, always uses Inf, warning finite width value set. ellipsis Character string use place truncation. default, Unicode ellipsis character used console UTF-8, three dots otherwise. style Truncation style: -ends: default, shows beginning end vector, skips elements middle needed. head: shows beginning vector, skips elements end, needed. wrap Character sequence x wrapped . character vector something coercible .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/enum_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate vector's elements as string — enum_str","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/enum_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate vector's elements as string — enum_str","text":"","code":"# by default, `last` defaults to `sep2` pal::enum_str(1:2) #> [1] \"1 and 2\" pal::enum_str(1:3) #> [1] \"1, 2 and 3\"  # input is optionally wrapped in a character sequence pal::enum_str(letters[1:3],               wrap = \"`\") #> [1] \"`a`, `b` and `c`\""},{"path":"https://pal.rpkg.dev/dev/reference/escape_lf.html","id":null,"dir":"Reference","previous_headings":"","what":"Escape line feeds / newlines — escape_lf","title":"Escape line feeds / newlines — escape_lf","text":"Escapes POSIX-standard newline control character LF (aka \\n) standard Unix/Linux recent versions macOS. Set escape_cr = TRUE order also escape carriage return character CR (aka \\r) commonly used Microsoft Windows.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/escape_lf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Escape line feeds / newlines — escape_lf","text":"","code":"escape_lf(x, escape_cr = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/escape_lf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Escape line feeds / newlines — escape_lf","text":"x character vector. escape_cr Whether also escape carriage return character CR (aka \\r). logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/escape_lf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Escape line feeds / newlines — escape_lf","text":"character vector length x.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/escape_lf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Escape line feeds / newlines — escape_lf","text":"","code":"library(magrittr)  # read in and print RStudio add-in registration file as-is text <-   fs::path_package(package = \"pal\",                    \"rstudio\", \"addins.dcf\") |>   readr::read_file() %T>%   pal::cat_lines() #> Name: Build `README.Rmd` #> Description: Executes `pal::build_readme()`. #> Binding: build_readme #> Interactive: false #>   # escape newlines and print again pal::escape_lf(text) |> pal::cat_lines() #> Name: Build `README.Rmd`\\nDescription: Executes `pal::build_readme()`.\\nBinding: build_readme\\nInteractive: false\\n"},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if object exists in namespace — exists_in_namespace","title":"Test if object exists in namespace — exists_in_namespace","text":"Determines whether object exists specific namespace.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if object exists in namespace — exists_in_namespace","text":"","code":"exists_in_namespace(x, ns, pos = -1L, envir = as.environment(pos))"},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if object exists in namespace — exists_in_namespace","text":"x object name (given character string). ns namespace, character string giving namespace. pos look object: see get. envir alternative way specify environment look .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if object exists in namespace — exists_in_namespace","text":"logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if object exists in namespace — exists_in_namespace","text":"complements utils::getFromNamespace() uses almost code internally.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/exists_in_namespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if object exists in namespace — exists_in_namespace","text":"","code":"if (pal::is_pkg_installed(\"pkgpurl\")) {   pal::exists_in_namespace(\"pkg_config\", \"pkgpurl\") } #> [1] TRUE  pal::exists_in_namespace(\"pkg_config\", \"pal\") #> [1] FALSE"},{"path":"https://pal.rpkg.dev/dev/reference/flatten_path_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten path tree — flatten_path_tree","title":"Flatten path tree — flatten_path_tree","text":"Flattens hierarchical list path elements character vector full paths.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/flatten_path_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten path tree — flatten_path_tree","text":"","code":"flatten_path_tree(path_tree, parent_path = NULL)"},{"path":"https://pal.rpkg.dev/dev/reference/flatten_path_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten path tree — flatten_path_tree","text":"path_tree Directory tree. nested list named lists character vectors. parent_path Optional parent path path_tree. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/flatten_path_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten path tree — flatten_path_tree","text":"character vector.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/flatten_path_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten path tree — flatten_path_tree","text":"","code":"list(\"root_dir\" = list(\"subdir1\",                        \"subdir2\" = list(\"file1.ext\"),                        \"file2.ext\")) |>   pal::flatten_path_tree() |>   pal::cat_lines() #> root_dir #> root_dir/subdir1 #> root_dir/subdir2 #> root_dir/subdir2/file1.ext #> root_dir/file2.ext"},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function's default parameter values — fn_param_defaults","title":"Get function's default parameter values — fn_param_defaults","text":"Extracts function parameter's default value(s) language definition returns result character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function's default parameter values — fn_param_defaults","text":"","code":"fn_param_defaults(param, fn = sys.function(sys.parent()), env = parent.frame())"},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function's default parameter values — fn_param_defaults","text":"param Parameter name. character scalar. fn function function name (searched env). See base::formals() details. env Environment fn defined . See base::formals() details.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get function's default parameter values — fn_param_defaults","text":"character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get function's default parameter values — fn_param_defaults","text":"function can convenient avoid duplication roxygen2 documentation leveraging inline R code evaluation follows:   list possible parameter values formatted unnumbered list instead, replace cli::ansi_collapse() as_md_list() example .","code":"#' @param some_param Some parameter. One of #'   `r pal::fn_param_defaults(param = \"some_param\", fn = \"some_fn\") |> pal::wrap_chr(\"\\x60\") |> cli::ansi_collapse()`. #' some_fn <- function(some_param = c(\"a\", \"b\", \"c\")) {   some_param <- rlang::arg_match(some_param)   ... }"},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"caveats","dir":"Reference","previous_headings":"","what":"Caveats","title":"Get function's default parameter values — fn_param_defaults","text":"base::deparse1() used internally get character representation non-character default values. Therefore deparse()'s fuzziness also applies function.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/fn_param_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get function's default parameter values — fn_param_defaults","text":"","code":"pal::fn_param_defaults(param = \".name_repair\",                        fn = tibble::as_tibble) #> [1] \"\\\"check_unique\\\"\" \"\\\"unique\\\"\"       \"\\\"universal\\\"\"    \"\\\"minimal\\\"\"       # as Markdown-formatted enumeration in prose pal::fn_param_defaults(param = \".name_repair\",                        fn = tibble::as_tibble) |>   pal::wrap_chr(\"`\") |>   cli::ansi_collapse() |>   cat() #> `\"check_unique\"`, `\"unique\"`, `\"universal\"`, and `\"minimal\"`"},{"path":"https://pal.rpkg.dev/dev/reference/fuse_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuse regular expressions — fuse_regex","title":"Fuse regular expressions — fuse_regex","text":"Combines vector list regular expressions single one (logical ).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/fuse_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuse regular expressions — fuse_regex","text":"","code":"fuse_regex(..., .literal = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/fuse_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuse regular expressions — fuse_regex","text":"... Regular expressions. elements converted type character fusing. Dynamic dots supported. .literal Whether input interpreted literally instead regular expressions. TRUE, elements ... wrapped literal escape sequences \\Q \\E.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/fuse_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuse regular expressions — fuse_regex","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/fuse_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuse regular expressions — fuse_regex","text":"","code":"# \\donttest{ # perform some (nonsense) Jane Austen text extraction regex <- c(\"My dear Jane\",            \"make haste, \",            \"(?i)\\\\bevil\")  stringr::str_subset(string = janeaustenr::prideprejudice,                     pattern = pal::fuse_regex(regex))# } #>  [1] \"Jane, make haste and tell us; make haste, my love.\\\"\"                      \"evil--a natural defect, which not even the best education can overcome.\\\"\" #>  [3] \"can have any evil tendency; and I am so far from objecting to dancing\"     \"evil.\\\"\"                                                                   #>  [5] \"to inevitable evils is the duty of us all; the peculiar duty of a\"         \"\\\"My dear Jane!\\\" exclaimed Elizabeth, \\\"you are too good. Your sweetness\" #>  [7] \"understanding than I now do of her heart. My dear Jane, Mr. Collins is a\"  \"wish him all manner of evil. But my feelings are not only cordial\"         #>  [9] \"however, was no evil to Elizabeth, and upon the whole she spent her time\"  \"travelling unimportant, distance becomes no evil. But that is not the\"     #> [11] \"world; and no one could say how lasting an evil he might have inflicted.\"  \"connection could not be so great an evil to my friend as to me. But\"       #> [13] \"of pointing out to my friend the certain evils of such a choice. I\"        \"herself, was entirely insensible of the evil. Elizabeth had frequently\"    #> [15] \"of particular, but of general evils, which I am now complaining. Our\"      \"over unavoidable evils, or augment them by anxiety, was no part of her\"    #> [17] \"unsuitable a marriage, nor ever been so fully aware of the evils arising\"  \"greater evil might be apprehended, was likely to be hardened in all\"       #> [19] \"good or evil must be done by him! Every idea that had been brought\"        \"kind of moral extractions from the evil before them.\"                      #> [21] \"\\\"You may well warn me against such an evil. Human nature is so prone\"     \"it sounds! And she was only sixteen last June. My dear Jane, I am in\"      #> [23] \"an evil which had been brought on by himself. If he _had another_\"         \"\\\"My dear Jane, make haste and hurry down. He is come--Mr. Bingley is\"     #> [25] \"representation of the evils attached to a connection with her, she dared\"  \"Elizabeth, and yourself, of what evils you may incur by a precipitate\"     #> [27] \"there were other evils before her. She anticipated what would be felt\""},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git file modification time — git_file_mod_time","title":"Get Git file modification time — git_file_mod_time","text":"Determine time file Git repository last modified.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git file modification time — git_file_mod_time","text":"","code":"git_file_mod_time(path, repo = \".\")"},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git file modification time — git_file_mod_time","text":"path Path file, relative Git repository root. repo Path Git repository.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git file modification time — git_file_mod_time","text":"datetime.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Git file modification time — git_file_mod_time","text":"Note committed changes file regarded. modification returned UTC.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/git_file_mod_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git file modification time — git_file_mod_time","text":"","code":"if (FALSE) { # \\dontrun{ pal::git_file_mod_time(path = \"README.md\")} # }"},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Git remote tree URL — git_remote_tree_url","title":"Get Git remote tree URL — git_remote_tree_url","text":"Determines base Git tree URL current branch's upstream remote repo.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Git remote tree URL — git_remote_tree_url","text":"","code":"git_remote_tree_url(repo = \".\", remote = NULL)"},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Git remote tree URL — git_remote_tree_url","text":"repo path git repository. directory repository, parent directories considered (see git_find). disable search, provide filepath protected (). using parameter, always explicitly call name (.e. repo = ) future versions gert may additional parameters. remote Name Git remote determine URL . Defaults \"origin\" present, otherwise first remote listed gert::git_remote_list().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Git remote tree URL — git_remote_tree_url","text":"repo Git repository, character scalar. Otherwise, character vector length zero.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Git remote tree URL — git_remote_tree_url","text":"function useful assemble URLs files folders repo's Git forge (GitHub, GitLab, etc.).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/git_remote_tree_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Git remote tree URL — git_remote_tree_url","text":"","code":"pal::git_remote_tree_url() |>   paste0(\"Rmd/pal.Rmd\") |>   browseURL()"},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to GitLab Flavored Markdown — gitlab_document","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"Format converting R Markdown GitLab Flavored Markdown.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"","code":"gitlab_document(   smart_punctuation = TRUE,   parse_emoji_markup = FALSE,   df_print = \"kable\",   toc = FALSE,   toc_depth = 6L,   fig_width = 7L,   fig_height = 5L,   dev = \"png\",   preserve_yaml = FALSE,   add_footnotes_hr = TRUE,   autolink_bare_uris = FALSE,   tex_math_single_backslash = FALSE )"},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"smart_punctuation Whether enable Pandoc's smart extension converts straight quotes curly quotes, --- em-dash (—), -- en-dash (–), ... ellipses (…). also replaces regular spaces certain abbreviations Mr. non-breaking spaces. parse_emoji_markup Whether enable Pandoc's emoji extension parses emoji markup (e.g. :smile:) Unicode emoticons. df_print Method used printing data frames. Valid values include \"default\", \"kable\", \"tibble\", \"paged\". \"default\" method uses corresponding S3 method print, typically print.data.frame. \"kable\" method uses knitr::kable function. \"tibble\" method uses tibble package print summary data frame. \"paged\" method creates paginated HTML table (note method valid formats produce HTML). addition named methods can also pass arbitrary function used printing data frames. can disable df_print behavior entirely setting option rmarkdown.df_print FALSE. See Data frame printing section bookdown book examples. toc Include table contents (TOC) automatically generated Pandoc. Note TOC placed README's body, meaning also first Markdown header. toc_depth Depth headers include table contents fig_width Default width (inches) figures fig_height Default height (inches) figures dev Graphics device use figure output (defaults png) preserve_yaml Preserve YAML front matter final document. add_footnotes_hr Whether add trailing horizontal rule (---) final Markdown file already end one contains footnotes (currently checks Pandoc's reference-style footnotes inline footnotes). improves readability file rendered GitLab.com. autolink_bare_uris Enable autolink_bare_uris Pandoc Markdown extension makes absolute URIs links, even surrounded pointy braces <...>. tex_math_single_backslash Enable tex_math_single_backslash Pandoc Markdown extension causes anything \\( \\) interpreted inline TeX math, anything \\[ \\] interpreted display TeX math. Note: drawback extension precludes escaping ( [.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"R Markdown output format intended fed rmarkdown::render().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"GitLab equivalent github_document R Markdown output format. basically ensures Pandoc called custom set options optimized maximum compatibility GitLab Flavored Markdown.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"caveats-regarding-gitlab-flavored-markdown-specific-features","dir":"Reference","previous_headings":"","what":"Caveats regarding GitLab-Flavored-Markdown-specific features","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"GitLab Flavored Markdown extends CommonMark Markdown specification bunch special features. able properly make use , observe following points: inline diffs, use curly braces ({}), square brackets ([]). latter escaped Pandoc conversion thus recognized GitLab starting/ending inline diff. set smart_punctuation = FALSE order leave certain special GitLab references (like commit range comparisons) untouched GitLab interpret correctly. special GitLab references snippets labels start tilde (~) dollar sign ($) work characters escaped Pandoc conversion. [[_TOC_]] tag let GitLab generate table contents work escaped Pandoc conversion. can let Pandoc generate TOC instead setting toc = TRUE. Multiline blockquotes work fence delimiters >>> escaped Pandoc conversion.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/gitlab_document.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to GitLab Flavored Markdown — gitlab_document","text":"","code":"# \\donttest{ tmp_file <- fs::file_temp() download.file(url = \"https://gitlab.com/rpkg.dev/pal/-/raw/master/Rmd/pal.Rmd\",               destfile = tmp_file,               quiet = TRUE,               mode = \"wb\")  rmarkdown::render(input = tmp_file,                   output_format = pal::gitlab_document(),                   quiet = TRUE) |>   brio::read_lines() |>   length()# } #> [1] 4228"},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if package configuration value is set — has_pkg_config_val","title":"Test if package configuration value is set — has_pkg_config_val","text":"Tests whether certain package configuration value set. See pkg_config_val() underlying concept.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if package configuration value is set — has_pkg_config_val","text":"","code":"has_pkg_config_val(   key,   pkg = utils::packageName(env = parent.frame()),   env = parent.frame() )"},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if package configuration value is set — has_pkg_config_val","text":"key Configuration key name. character scalar. pkg Package name. character scalar. Defaults name calling package. env Environment evaluate default_value_dynamic , necessary.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if package configuration value is set — has_pkg_config_val","text":"logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if package configuration value is set — has_pkg_config_val","text":"Note has_pkg_config_val() throws error package configuration key exist.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/has_pkg_config_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if package configuration value is set — has_pkg_config_val","text":"","code":"try(   pal::has_pkg_config_val(key = \"gen_pkgdown_ref\",                           pkg = \"pkgpurl\") ) #> [1] TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if two data frames/tibbles are equal — is_equal_df","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"Compares two data frames/tibbles (two objects coercible tibbles like matrices), optionally ignoring row column ordering, returns TRUE equal, FALSE otherwise. latter case quiet = FALSE, information detected differences printed console.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"","code":"is_equal_df(   x,   y,   ignore_col_order = FALSE,   ignore_row_order = FALSE,   ignore_col_types = FALSE,   tolerance = NULL,   quiet = TRUE,   max_diffs = 10L,   return_waldo_compare = FALSE )"},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"x data frame / tibble check changes. y data frame / tibble x checked , .e. reference, messages describe x different y. ignore_col_order Whether ignore order columns. ignore_row_order Whether ignore order rows. ignore_col_types Whether distinguish similar column types. Currently, set TRUE, convert factors characters integers doubles comparison. tolerance non-NULL, used threshold ignoring small floating point difference comparing numeric vectors. Using non-NULL value cause integer double vectors compared based values, types, ignore difference NaN NA_real_. uses algorithm .equal(), .e., first generate x_diff y_diff subsetting x y look locations differences. check mean(abs(x_diff - y_diff)) / mean(abs(y_diff)) (just mean(abs(x_diff - y_diff)) y_diff small) less tolerance. quiet Whether output detected differences x y console. max_diffs Maximum number differences shown. relevant quiet = FALSE return_waldo_compare = TRUE. Set max_diffs = Inf see differences. return_waldo_compare Whether return character vector class waldo_compare describing differences x y instead TRUE FALSE.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"return_waldo_compare = FALSE, logical scalar indicating result comparison. Otherwise character vector class waldo_compare describing differences x y.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"hood, function relies waldo::compare().","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_equal_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if two data frames/tibbles are equal — is_equal_df","text":"","code":"scramble <- function(x) x[sample(nrow(x)), sample(ncol(x))]  # by default, ordering of rows and columns matters... pal::is_equal_df(x = mtcars,                  y = scramble(mtcars)) #> [1] FALSE  # ...but those can be ignored if desired pal::is_equal_df(x = mtcars,                  y = scramble(mtcars),                  ignore_col_order = TRUE) #> [1] FALSE pal::is_equal_df(x = mtcars,                  y = scramble(mtcars),                  ignore_row_order = TRUE) #> [1] FALSE  # by default, `is_equal_df()` is sensitive to column type differences... df1 <- data.frame(x = \"a\",                   stringsAsFactors = FALSE) df2 <- data.frame(x = factor(\"a\")) pal::is_equal_df(df1, df2) #> [1] FALSE  # ...but you can request it to not make a difference between similar types pal::is_equal_df(df1, df2,                  ignore_col_types = TRUE) #> [1] TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an HTTP request is successful — is_http_success","title":"Test if an HTTP request is successful — is_http_success","text":"Convenience wrapper around !httr::http_error() returns TRUE specified url resolved HEAD request successfully completed, FALSE case.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an HTTP request is successful — is_http_success","text":"","code":"is_http_success(url, retries = 0L, quiet = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an HTTP request is successful — is_http_success","text":"url HTTP protocol address. scheme optional, \"google.com\" \"https://google.com\" work. character scalar. retries Maximum number retries HEAD request case HTTP error. integer scalar >= 0. retries performed using exponential backoff jitter, see httr::RETRY() details. quiet Whether suppress message displaying long next retry case HTTP error occurred. logical scalar. relevant retries > 0.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an HTTP request is successful — is_http_success","text":"logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if an HTTP request is successful — is_http_success","text":"function similar RCurl::url.exists(), .e. retrieves header, body, based httr turn based curl. checks lower levels network stack like performing DNS queries TCP port pings, see pingr package.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_http_success.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an HTTP request is successful — is_http_success","text":"","code":"pal::is_http_success(\"goo.gl\") #> [1] TRUE pal::is_http_success(\"https://google.com/\") #> [1] TRUE pal::is_http_success(\"https://google.not/\") #> [1] FALSE pal::is_http_success(\"https://google.not/\",                      retries = 2,                      quiet = FALSE) #> Error in curl::curl_fetch_memory(url, handle = handle): Couldn't resolve host name [google.not]: Could not resolve host: google.not #> Request failed [ERROR]. Retrying in 1.7 seconds... #> Error in curl::curl_fetch_memory(url, handle = handle): Couldn't resolve host name [google.not]: Could not resolve host: google.not #> Request failed [ERROR]. Retrying in 3 seconds... #> [1] FALSE"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_cran.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a package is available on CRAN — is_pkg_cran","title":"Test if a package is available on CRAN — is_pkg_cran","text":"Test package available CRAN","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_cran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a package is available on CRAN — is_pkg_cran","text":"","code":"is_pkg_cran(pkg, min_version = NULL, retries = 1L)"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_cran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a package is available on CRAN — is_pkg_cran","text":"pkg Package name (case-sensitive). character scalar. min_version Minimum required version number pkg. Must either NULL ignore version numbers, single package_version something coercible . retries Maximum number retries HEAD request case HTTP error. integer scalar >= 0. retries performed using exponential backoff jitter, see httr::RETRY() details.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_cran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a package is available on CRAN — is_pkg_cran","text":"logical scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_cran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a package is available on CRAN — is_pkg_cran","text":"","code":"pal::is_pkg_cran(\"foobar\") #> [1] FALSE pal::is_pkg_cran(\"dplyr\") #> [1] TRUE pal::is_pkg_cran(\"dplyr\", min_version = \"9999.9\") #> [1] FALSE"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a directory is an R package — is_pkg_dir","title":"Test if a directory is an R package — is_pkg_dir","text":"Convenience wrapper around rprojroot::is_r_package root criterion. Note default return TRUE root package directory, subdirectories.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a directory is an R package — is_pkg_dir","text":"","code":"is_pkg_dir(path = \".\", check_parent_dirs = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a directory is an R package — is_pkg_dir","text":"path Path directory check. character scalar. Defaults current working directory. check_parent_dirs Whether also check path's parent directories (filesystem root) R package setup. Setting check_parent_dirs = TRUE guarantees TRUE returned subdirectories R package.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a directory is an R package — is_pkg_dir","text":"TRUE path root (check_parent_dirs = FALSE) (sub)directory directory (check_parent_dirs = TRUE) R package, FALSE otherwise.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a directory is an R package — is_pkg_dir","text":"","code":"pal::is_pkg_dir() #> [1] FALSE pal::is_pkg_dir(fs::path_package(\"utils\")) #> [1] TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if packages are installed — is_pkg_installed","title":"Test if packages are installed — is_pkg_installed","text":"Returns TRUE FALSE pkg, depending whether pkg installed current system , optionally ensuring min_version.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if packages are installed — is_pkg_installed","text":"","code":"is_pkg_installed(pkg, min_version = NULL)"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if packages are installed — is_pkg_installed","text":"pkg Package names. character vector. min_version Minimum required version number pkg. Must either NULL ignore version numbers, vector package_versions something coercible .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if packages are installed — is_pkg_installed","text":"named logical vector length pkg.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if packages are installed — is_pkg_installed","text":"contrast base::require(), function checks packages installed without attaching namespaces . contrast rlang::is_installed() xfun::pkg_available(), function load packages installed. contrast xfun::pkg_available(), fully vectorized, .e. returns (named) logical vector length pkg. considerably faster commonly used pkg %% rownames(installed.packages()) check.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_pkg_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if packages are installed — is_pkg_installed","text":"","code":"pal::is_pkg_installed(\"tidyverse\") #> tidyverse  #>      TRUE   # it is vectorized... pal::is_pkg_installed(pkg = c(\"dplyr\", \"tibble\", \"magrittr\"),                       min_version = c(\"1.0\", \"2.0\", \"99.9.9000\")) #>    dplyr   tibble magrittr  #>     TRUE     TRUE    FALSE   # ...and scalar arguments will be recycled pal::is_pkg_installed(pkg = \"dplyr\",                       min_version = c(\"0.5\", \"1.0\", \"99.9.9000\")) #> dplyr dplyr dplyr  #>  TRUE  TRUE FALSE   pal::is_pkg_installed(pkg = c(\"dplyr\", \"tibble\", \"magrittr\"),                       min_version = \"1.0\") #>    dplyr   tibble magrittr  #>     TRUE     TRUE     TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkgdown_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","title":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","text":"Convenience wrapper around rprojroot::is_pkgdown_project root criterion. Note default return TRUE root package directory pkgdown subdirectory, subdirectories.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkgdown_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","text":"","code":"is_pkgdown_dir(path = \".\", check_parent_dirs = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/is_pkgdown_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","text":"path Path R package directory check. character scalar. Defaults current working directory. check_parent_dirs Whether also check path's parent directories (filesystem root) pkgdown setup. Setting check_parent_dirs = TRUE guarantees TRUE returned subdirectories R package pkgdown set .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_pkgdown_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","text":"TRUE pkgdown set path, FALSE otherwise.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_pkgdown_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if pkgdown is set up for an R package directory — is_pkgdown_dir","text":"","code":"pal::is_pkgdown_dir() #> [1] FALSE pal::is_pkgdown_dir(fs::path_package(\"pal\")) #> [1] FALSE"},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if URL — is_url","title":"Test if URL — is_url","text":"Tests whether elements character vector Uniform Resource Locators (URLs).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if URL — is_url","text":"","code":"is_url(x)"},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if URL — is_url","text":"x Character vector test.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if URL — is_url","text":"logical vector length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if URL — is_url","text":"function based xml2::url_parse() simply checks whether elements x contain scheme well scheme-specific part (excl. ports). checks performed, explicitly verified URL actually conforms respective scheme.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/is_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if URL — is_url","text":"","code":"pal::is_url(c(\"/some/path\",               \"file:///some/path\")) #> [1] FALSE  TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/knitr_table_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine current knitr table format — knitr_table_format","title":"Determine current knitr table format — knitr_table_format","text":"Determines current knitr table format based R option knitr.table.format can either set directly valid format string function returning one strings conditionally.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/knitr_table_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine current knitr table format — knitr_table_format","text":"","code":"knitr_table_format(default = c(\"pipe\", \"simple\", \"html\", \"latex\", \"rst\"))"},{"path":"https://pal.rpkg.dev/dev/reference/knitr_table_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine current knitr table format — knitr_table_format","text":"default knitr table format fall back R option knitr.table.format set. One \"pipe\" \"simple\" \"html\" \"latex\" \"rst\" See knitr::kable()'s format argument details.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/knitr_table_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine current knitr table format — knitr_table_format","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/knitr_table_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine current knitr table format — knitr_table_format","text":"basically convenience wrapper able access current knitr.table.format hassle-free way, .e. provides conditional logic account possibility knitr.table.format set function rather format string.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/ls_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"List a subset of all installed packages — ls_pkg","title":"List a subset of all installed packages — ls_pkg","text":"List subset installed packages","code":""},{"path":"https://pal.rpkg.dev/dev/reference/ls_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List a subset of all installed packages — ls_pkg","text":"","code":"ls_pkg(pkg, ignore_case = TRUE, as_regex = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/ls_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List a subset of all installed packages — ls_pkg","text":"pkg character vector package names. ignore_case distinguish upper lower case letters pkg. FALSE, pkg treated case-sensitive. as_regex Interpret pkg regular expression(s). FALSE, pkg interpreted literally.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/ls_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List a subset of all installed packages — ls_pkg","text":"tibble.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/ls_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List a subset of all installed packages — ls_pkg","text":"","code":"pal::ls_pkg(pkg = c(\"methods\", \"utils\")) #> # A tibble: 2 × 16 #>   Package LibPath     Version Priority Depends Imports LinkingTo Suggests Enhances License License_is_FOSS License_restricts_use OS_type MD5sum NeedsCompilation #>   <chr>   <chr>       <chr>   <chr>    <chr>   <chr>   <chr>     <chr>    <chr>    <chr>   <chr>           <chr>                 <chr>   <chr>  <chr>            #> 1 methods /usr/lib/R… 4.4.2   base     NA      utils,… NA        codetoo… NA       Part o… NA              NA                    NA      NA     yes              #> 2 utils   /usr/lib/R… 4.4.2   base     NA      NA      NA        methods… NA       Part o… NA              NA                    NA      NA     yes              #> # ℹ 1 more variable: Built <chr>  pal::ls_pkg(pkg = \"^ut\",             as_regex = TRUE) #> # A tibble: 2 × 16 #>   Package LibPath     Version Priority Depends Imports LinkingTo Suggests Enhances License License_is_FOSS License_restricts_use OS_type MD5sum NeedsCompilation #>   <chr>   <chr>       <chr>   <chr>    <chr>   <chr>   <chr>     <chr>    <chr>    <chr>   <chr>           <chr>                 <chr>   <chr>  <chr>            #> 1 utf8    /home/sali… 1.2.4   NA       R (>= … NA      NA        \"cli, c… NA       Apache… NA              NA                    NA      NA     yes              #> 2 utils   /usr/lib/R… 4.4.2   base     NA      NA      NA        \"method… NA       Part o… NA              NA                    NA      NA     yes              #> # ℹ 1 more variable: Built <chr>"},{"path":"https://pal.rpkg.dev/dev/reference/md_to_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","title":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","text":"Parses (R) Markdown file content according CommonMark specification returns XML parse tree.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_to_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","text":"","code":"md_to_xml(   md,   smart_punctuation = FALSE,   hardbreaks = FALSE,   normalize = TRUE,   sourcepos = FALSE,   footnotes = TRUE,   extensions = c(\"strikethrough\", \"table\", \"tasklist\"),   eol = c(\"LF\", \"CRLF\", \"CR\", \"LFCR\"),   strip_xml_ns = TRUE )"},{"path":"https://pal.rpkg.dev/dev/reference/md_to_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","text":"md (R) Markdown file content character scalar. smart_punctuation Whether enable Pandoc's smart extension converts straight quotes curly quotes, --- em-dash (—), -- en-dash (–), ... ellipses (…). also replaces regular spaces certain abbreviations Mr. non-breaking spaces. hardbreaks Whether treat newlines hard line breaks. normalize Consolidate adjacent text nodes. sourcepos Include source position attribute output. footnotes parse footnotes extensions Enables Github extensions. Can TRUE () FALSE (none) character vector subset available extensions. eol End line (EOL) control character sequence. One \"LF\" line feed (LF) character (\"\\n\"). standard Unix Unix-like systems (Linux, macOS, *BSD, etc.) default. \"CRLF\" carriage return + line feed (CR+LF) character sequence (\"\\r\\n\"). standard Microsoft Windows, DOS systems. \"CR\" carriage return (CR) character (\"\\r\"). standard classic Mac OS antiquated systems. \"LFCR\" line feed + carriage return (LF+CR) character sequence (\"\\n\\r\"). standard RISC OS exotic systems. strip_xml_ns Whether remove default XML namespace (d1) assigned commonmark::markdown_xml().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_to_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","text":"xml_document.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/md_to_xml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse (R) Markdown as CommonMark XML tree — md_to_xml","text":"","code":"\"# A title  Some prose.  ## A subtitle  More prose.  ## Another subtitle  Out of prose here.  ### A sub-subtitle  I'm dug in.  # Another title  A last word.\" |> pal::md_to_xml() #> {xml_document} #> <document> #>  [1] <heading level=\"1\">\\n  <text xml:space=\"preserve\">A title<\/text>\\n<\/heading> #>  [2] <paragraph>\\n  <text xml:space=\"preserve\">Some prose.<\/text>\\n<\/paragraph> #>  [3] <heading level=\"2\">\\n  <text xml:space=\"preserve\">A subtitle<\/text>\\n<\/heading> #>  [4] <paragraph>\\n  <text xml:space=\"preserve\">More prose.<\/text>\\n<\/paragraph> #>  [5] <heading level=\"2\">\\n  <text xml:space=\"preserve\">Another subtitle<\/text>\\n<\/heading> #>  [6] <paragraph>\\n  <text xml:space=\"preserve\">Out of prose here.<\/text>\\n<\/paragraph> #>  [7] <heading level=\"3\">\\n  <text xml:space=\"preserve\">A sub-subtitle<\/text>\\n<\/heading> #>  [8] <paragraph>\\n  <text xml:space=\"preserve\">I'm dug in.<\/text>\\n<\/paragraph> #>  [9] <heading level=\"1\">\\n  <text xml:space=\"preserve\">Another title<\/text>\\n<\/heading> #> [10] <paragraph>\\n  <text xml:space=\"preserve\">A last word.<\/text>\\n<\/paragraph>"},{"path":"https://pal.rpkg.dev/dev/reference/md_verb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to verbatim Markdown — md_verb","title":"Convert to verbatim Markdown — md_verb","text":"Converts provided R expressions character representation using base::deparse1() formats verbatim Markdown.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_verb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to verbatim Markdown — md_verb","text":"","code":"md_verb(   ...,   .eval = TRUE,   .collapse = \" \",   .backtick = TRUE,   .control = c(\"keepNA\", \"keepInteger\", \"niceNames\", \"showAttributes\", \"warnIncomplete\"),   .width.cutoff = 500L,   .nlines = -1L )"},{"path":"https://pal.rpkg.dev/dev/reference/md_verb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to verbatim Markdown — md_verb","text":"... R expression(s) convert verbatim Markdown. Must unnamed. Dynamic dots supported. .eval Whether evaluate expression(s) .... .collapse String separate results single expression .... .backtick Whether enclose symbolic names backticks follow standard syntax. .control Deparsing options. character vector NULL. See base::.deparseOpts possible options. .width.cutoff Cutoff (bytes) line-breaking tried. integer scalar 20 500. .nlines Maximum number lines produce. negative value indicates limit. integer scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_verb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to verbatim Markdown — md_verb","text":"character vector length ....","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/md_verb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to verbatim Markdown — md_verb","text":"","code":"pal::md_verb(1:3, \"It\", is.logical, `||`, FALSE, quote(`?!`)) |>   pal::cat_lines() #> `1:3` #> `\"It\"` #> `.Primitive(\"is.logical\")` #> `.Primitive(\"||\")` #> `FALSE` #> `` `?!` ``  # you can splice vector or list expressions if you like pal::md_verb(!!!1:3, \"It\", is.logical, `||`, FALSE, quote(`?!`)) |>   pal::cat_lines() #> `1L` #> `2L` #> `3L` #> `\"It\"` #> `.Primitive(\"is.logical\")` #> `.Primitive(\"||\")` #> `FALSE` #> `` `?!` ``  # to evaluate, or not to evaluate, that is the question pal::md_verb(!!!1:3, \"It\", is.logical, `||`, FALSE, quote(`?!`),              .eval = FALSE) |>   pal::cat_lines() #> `!!!1:3` #> `\"It\"` #> `is.logical` #> `` `||` `` #> `FALSE` #> `` quote(`?!`) ``  # unevaluated expressions do not need to exist pal::md_verb(Not, actual(), `R-expressions`,              .eval = FALSE) |>   pal::cat_lines() #> `Not` #> `actual()` #> `` `R-expressions` ``  # you can opt out of wrapping non-standard syntax in additional backticks pal::md_verb(Not, actual(), `R-expressions`,              .eval = FALSE,              .backtick = FALSE) |>   pal::cat_lines() #> `Not` #> `actual()` #> `R-expressions`"},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"Determines XML children node indices every XML node highest level xml interpreting Markdown heading levels (1–6).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"","code":"md_xml_subnode_ix(xml)"},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"xml CommonMark parse tree. xml_document, xml_nodeset xml_node.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"list integer vectors length number XML nodes highest level xml.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"commonmark::markdown_xml() (md_to_xml() builds upon ) parse (R) Markdown file content according CommonMark specification, return information document's heading hierarchy. md_xml_subnode_ix() fills gap giving hierarchy structure form XML subnode indices every node highest level xml.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/md_xml_subnode_ix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine CommonMark XML subnode indices — md_xml_subnode_ix","text":"","code":"\"# A title  Some prose.  ## A subtitle  More prose.  ## Another subtitle  Out of prose here.  ### A sub-subtitle  I'm dug in.  # Another title  A last word.\" |>   pal::md_to_xml() |>   pal::md_xml_subnode_ix() #> [[1]] #> [1] 2 3 4 5 6 7 8 #>  #> [[2]] #> integer(0) #>  #> [[3]] #> [1] 4 #>  #> [[4]] #> integer(0) #>  #> [[5]] #> [1] 6 7 8 #>  #> [[6]] #> integer(0) #>  #> [[7]] #> [1] 8 #>  #> [[8]] #> integer(0) #>  #> [[9]] #> [1] 10 #>  #> [[10]] #> integer(0) #>"},{"path":"https://pal.rpkg.dev/dev/reference/mime_to_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"MIME type to file extension — mime_to_ext","title":"MIME type to file extension — mime_to_ext","text":"Determines suitable file extension MIME type, based .. mime::mimemap mime:::mimeextra. case multiple matches, first one returned warning printed (unless quiet = TRUE).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/mime_to_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MIME type to file extension — mime_to_ext","text":"","code":"mime_to_ext(mime_type, quiet = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/mime_to_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MIME type to file extension — mime_to_ext","text":"mime_type MIME type determine file extension . character scalar. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/mime_to_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MIME type to file extension — mime_to_ext","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/mime_to_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MIME type to file extension — mime_to_ext","text":"","code":"pal::mime_to_ext(\"application/json\") #> [1] \"json\" pal::mime_to_ext(\"audio/mpeg\") #> Warning: The MIME type \"audio/mpeg\" maps to multiple file extensions (\"mpga\", \"mpega\", \"mp2\", \"mp3\", and \"m4a\"). Simply the first one is returned. #> [1] \"mpga\""},{"path":"https://pal.rpkg.dev/dev/reference/pal-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pal: Friendly Convenience/Utility Functions — pal-package","title":"pal: Friendly Convenience/Utility Functions — pal-package","text":"collection convenience/utility functions complementing base R tidyverse.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/pal-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pal: Friendly Convenience/Utility Functions — pal-package","text":"Maintainer: Salim Brüggemann salim-b@pm.(ORCID)","code":""},{"path":"https://pal.rpkg.dev/dev/reference/path_mod_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path modification time — path_mod_time","title":"Get path modification time — path_mod_time","text":"Determine file directory's modification time. base::file.mtime(), function based fs::file_info() datetime modification returned UTC default.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/path_mod_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path modification time — path_mod_time","text":"","code":"path_mod_time(path, follow = FALSE, tz = \"UTC\")"},{"path":"https://pal.rpkg.dev/dev/reference/path_mod_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path modification time — path_mod_time","text":"path character vector one paths. follow TRUE, symbolic links followed (recursively) results final file rather link. tz Timezone return result . character scalar \"\" means current time zone.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/path_mod_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path modification time — path_mod_time","text":"datetime.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/path_mod_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path modification time — path_mod_time","text":"","code":"fs::path_package(package = \"dplyr\",                  \"DESCRIPTION\") |>   pal::path_mod_time() #> [1] \"2023-11-22 23:27:48 UTC\""},{"path":"https://pal.rpkg.dev/dev/reference/path_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine file path of executing script — path_script","title":"Determine file path of executing script — path_script","text":"Tries determine path R/Rmd script function called .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/path_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine file path of executing script — path_script","text":"","code":"path_script()"},{"path":"https://pal.rpkg.dev/dev/reference/path_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine file path of executing script — path_script","text":"file path executing script.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dataframe/tibble to Markdown pipe table — pipe_table","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"Convenience wrapper around knitr::kable(format = \"pipe\") create Markdown pipe table.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"","code":"pipe_table(   x,   incl_rownames = NULL,   strong_colnames = TRUE,   strong_rownames = TRUE,   align = NULL,   label = NULL,   digits = getOption(\"digits\"),   format_args = list() )"},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"x Dataframe/tibble/matrix converted pipe table. incl_rownames Whether include row names . logical scalar NULL. NULL, row names included rownames(x) neither NULL identical seq_len(nrow(x)). strong_colnames Whether highlight column names formatting <strong> (wrapping two asterisks). strong_rownames Whether highlight row names formatting <strong> (wrapping two asterisks). align Column alignment. Either NULL auto-alignment character vector consisting 'l' (left), 'c' (center) /'r' (right). align = NULL, numeric columns right-aligned, columns left-aligned. length(align) == 1L, string expanded vector individual letters, e.g. 'clc' becomes c('c', 'l', 'c'). label table reference label. default, label obtained knitr::opts_current$get('label') (.e., current chunk label). disable label, use label = NA. digits Maximum number digits numeric columns, passed round(). can also vector length ncol(x), set number digits individual columns. format_args list arguments passed base::format() format table values, e.g. list(big.mark = ',').","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"Missing values (NA) table displayed NA default. want display characters, can set option knitr.kable.NA, e.g. options(knitr.kable.NA = '') hide NA values. can set option knitr.kable.max_rows limit number rows show table, e.g., options(knitr.kable.max_rows = 30).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"create-tables-dynamically-in-roxygen-documentation","dir":"Reference","previous_headings":"","what":"Create tables dynamically in roxygen2 documentation","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"function can useful create tables inside roxygen2 documentation programmatically data using dynamic R code. example, inline code `r mtcars |> head() |> pipe_table()` produce following table roxygen2 7.1.0 :","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/pipe_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert dataframe/tibble to Markdown pipe table — pipe_table","text":"","code":"mtcars |> head() |> pal::pipe_table() |> pal::cat_lines() #> |                      | **mpg**| **cyl**| **disp**| **hp**| **drat**| **wt**| **qsec**| **vs**| **am**| **gear**| **carb**| #> |:---------------------|-------:|-------:|--------:|------:|--------:|------:|--------:|------:|------:|--------:|--------:| #> |**Mazda RX4**         |    21.0|       6|      160|    110|     3.90|  2.620|    16.46|      0|      1|        4|        4| #> |**Mazda RX4 Wag**     |    21.0|       6|      160|    110|     3.90|  2.875|    17.02|      0|      1|        4|        4| #> |**Datsun 710**        |    22.8|       4|      108|     93|     3.85|  2.320|    18.61|      1|      1|        4|        1| #> |**Hornet 4 Drive**    |    21.4|       6|      258|    110|     3.08|  3.215|    19.44|      1|      0|        3|        1| #> |**Hornet Sportabout** |    18.7|       8|      360|    175|     3.15|  3.440|    17.02|      0|      0|        3|        2| #> |**Valiant**           |    18.1|       6|      225|    105|     2.76|  3.460|    20.22|      1|      0|        3|        1|"},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Get package configuration value — pkg_config_val","title":"Get package configuration value — pkg_config_val","text":"Retrieves package configuration value canonical way. following configuration sources consulted descending order first hit returned: R option <pkg>.<key>. environment variable R_<PKG>_<KEY>. ad-hoc default value specified via function's default argument (NULL means unspecified). configuration's global default value specified package's configuration metadata (column default_value default_value_dynamic <pkg>::pkg_config; NULL means unspecified). Depending require, error thrown none sources contain value.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get package configuration value — pkg_config_val","text":"","code":"pkg_config_val(   key,   pkg = utils::packageName(env = parent.frame()),   default = NULL,   require = NULL,   env = parent.frame() )"},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get package configuration value — pkg_config_val","text":"key Configuration key name. character scalar. pkg Package name. character scalar. Defaults name calling package. default Default value fall back neither R option <pkg>.<key> environment variable R_<PKG>_<KEY> set. NULL, default value key <pkg>::pkg_config used (defined). require Whether require configuration value set. TRUE configuration value set, error thrown instructions provide value. NULL, require value key <pkg>::pkg_config used (defaults TRUE). env Environment evaluate default_value_dynamic , necessary.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get package configuration value — pkg_config_val","text":"R object.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get package configuration value — pkg_config_val","text":"function intended used package authors want expose package configuration options canonical way (outlined ). pkg_config_val() properly work, configuration metadata must available package's namespace object pkg_config, must dataframe tibble minimum columns key (type character holding configuration key names) default_value (type list holding static default configuration values) default_value_dynamic (type character holding R code expressions evaluate default configuration values dynamically access time).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get package configuration value — pkg_config_val","text":"","code":"try(   pal::pkg_config_val(key = \"gen_pkgdown_ref\",                       pkg = \"pkgpurl\") ) #> [1] TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default package configuration value — pkg_config_val_default","title":"Get default package configuration value — pkg_config_val_default","text":"Retrieves package configuration's default value package's configuration metadata (column default_value default_value_dynamic <pkg>::pkg_config). default value specified (NULL), nothing returned (NULL).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default package configuration value — pkg_config_val_default","text":"","code":"pkg_config_val_default(   key,   pkg = utils::packageName(env = parent.frame()),   env = parent.frame() )"},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default package configuration value — pkg_config_val_default","text":"key Configuration key name. character scalar. pkg Package name. character scalar. Defaults name calling package. env Environment evaluate default_value_dynamic , necessary.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default package configuration value — pkg_config_val_default","text":"pkgsnip::return_lbl(\"r_obj\")","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/pkg_config_val_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default package configuration value — pkg_config_val_default","text":"","code":"try(   pal::pkg_config_val_default(key = \"gen_pkgdown_ref\",                               pkg = \"pkgpurl\") ) #> [1] TRUE"},{"path":"https://pal.rpkg.dev/dev/reference/prettify_nr.html","id":null,"dir":"Reference","previous_headings":"","what":"Prettify a numeric vector — prettify_nr","title":"Prettify a numeric vector — prettify_nr","text":"Prettifies numeric vector rounding, separating thousands optionally procedures. Basically convenience wrapper around round_to() base::format().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/prettify_nr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prettify a numeric vector — prettify_nr","text":"","code":"prettify_nr(   x,   round_to = 0.1,   round_up = TRUE,   big_mark = \"'\",   decimal_mark = \".\",   justify_right = FALSE,   ... )"},{"path":"https://pal.rpkg.dev/dev/reference/prettify_nr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prettify a numeric vector — prettify_nr","text":"x numeric vector prettify. round_to Number round x . numeric scalar. round_up Whether round remainder exactly / 2 . Set FALSE order round . big_mark Character used every 3 digits separate thousands. decimal_mark Character used indicate numeric decimal point. relevant x solely consist integers. justify_right Whether right-justify results common width. See trim parameter base::format() details. ... arguments passed base::format().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/prettify_nr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prettify a numeric vector — prettify_nr","text":"character vector length x.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/prettify_nr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prettify a numeric vector — prettify_nr","text":"","code":"c(0.11, 11111.11) |> pal::prettify_nr() #> [1] \"0.1\"      \"11'111.1\"  c(0.11, 11111.11) |>   pal::prettify_nr(justify_right = TRUE) |>   pal::cat_lines() #>      0.1 #> 11'111.1"},{"path":"https://pal.rpkg.dev/dev/reference/print_pkg_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Print package configuration metadata — print_pkg_config","title":"Print package configuration metadata — print_pkg_config","text":"Prints package's configuration metadata (<pkg>::pkg_config) prettily formatted Markdown table.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/print_pkg_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print package configuration metadata — print_pkg_config","text":"","code":"print_pkg_config(   pkg = utils::packageName(env = parent.frame()),   roxy_to_md = FALSE )"},{"path":"https://pal.rpkg.dev/dev/reference/print_pkg_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print package configuration metadata — print_pkg_config","text":"pkg Package name. character scalar. Defaults name calling package. roxy_to_md Whether convert roxygen2 documentation links pseudo-Markdown style actual Markdown ones using roxy_to_md_links().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/print_pkg_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print package configuration metadata — print_pkg_config","text":"character vector.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/print_pkg_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print package configuration metadata — print_pkg_config","text":"","code":"try(   pal::print_pkg_config(pkg = \"pkgpurl\") ) #>  #>  #> |**Description**                                                                                                                                                                                                                                                                                                                                                                                                                                                 |**R option**                   |**Environment variable**         |**Default value** | #> |:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------|:--------------------------------|:-----------------| #> |Whether or not to add a **copyright notice** at the beginning of the generated `.R` files as recommended by e.g. the [GNU licenses](https://www.gnu.org/licenses/gpl-howto.html). The notice consists of the name and description of the program and the word `Copyright (C)` followed by the release years and the name(s) of the copyright holder(s), or if not specified, the author(s). The year is always the current year. All the other information is extracted from the package's `DESCRIPTION` file.|`pkgpurl.add_copyright_notice` |`R_PKGPURL_ADD_COPYRIGHT_NOTICE` |`TRUE`            | #> |Whether or not to add a **license notice** at the beginning of the generated `.R` files as recommended by e.g. the [GNU licenses](https://www.gnu.org/licenses/gpl-howto.html). The license is determined from the package's `DESCRIPTION` file and currently only the [`AGPL-3.0-or-later` license](https://spdx.org/licenses/AGPL-3.0-or-later.html) is supported.                                                                                            |`pkgpurl.add_license_notice`   |`R_PKGPURL_ADD_LICENSE_NOTICE`   |`TRUE`            | #> |Whether or not to overwrite [pkgdown](https://pkgdown.r-lib.org/)'s [reference index](https://pkgdown.r-lib.org/reference/build_reference.html#reference-index) in the configuration file `_pkgdown.yml` with an auto-generated one based on the main input file as described in [pkgpurl::gen_pkgdown_ref()].                                                                                                                                                  |`pkgpurl.gen_pkgdown_ref`      |`R_PKGPURL_GEN_PKGDOWN_REF`      |`TRUE`            |"},{"path":"https://pal.rpkg.dev/dev/reference/reason_pkg_required.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble reason why package is required — reason_pkg_required","title":"Assemble reason why package is required — reason_pkg_required","text":"Assembles prose text containing reason certain R package required fn another pkg. Intended used argument reason rlang::check_installed().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/reason_pkg_required.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble reason why package is required — reason_pkg_required","text":"","code":"reason_pkg_required(   fn = rlang::call_name(rlang::caller_call()),   pkg = utils::packageName(parent.frame()) )"},{"path":"https://pal.rpkg.dev/dev/reference/reason_pkg_required.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble reason why package is required — reason_pkg_required","text":"fn Name function requires R package. character scalar. pkg Name package fn part . character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/reason_pkg_required.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble reason why package is required — reason_pkg_required","text":"character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/reason_pkg_required.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble reason why package is required — reason_pkg_required","text":"","code":"if (FALSE) { # \\dontrun{   rlang::check_installed(pkg = \"foo\",                          reason = pal::reason_pkg_required(pkg = \"bar\",                                                            fn = \"serve\")) } # }"},{"path":"https://pal.rpkg.dev/dev/reference/reduce_df_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce a nested list of data frames / tibbles to a single tibble — reduce_df_list","title":"Reduce a nested list of data frames / tibbles to a single tibble — reduce_df_list","text":"Recursively reduces nested list containing data frames / tibbles leafs single tibble.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/reduce_df_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce a nested list of data frames / tibbles to a single tibble — reduce_df_list","text":"","code":"reduce_df_list(x, strict = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/reduce_df_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce a nested list of data frames / tibbles to a single tibble — reduce_df_list","text":"x list containing data frames / tibbles leafs. strict Ensure x contains data frames / tibbles throw error otherwise. FALSE, leafs containing objects ignored (skipped).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/reduce_df_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce a nested list of data frames / tibbles to a single tibble — reduce_df_list","text":"tibble.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/rename_from.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename elements from dictionary — rename_from","title":"Rename elements from dictionary — rename_from","text":"Renames elements vector list dictionary, leaving unmatched names untouched default.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/rename_from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename elements from dictionary — rename_from","text":"","code":"rename_from(x, dict, default = names(x))"},{"path":"https://pal.rpkg.dev/dev/reference/rename_from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename elements from dictionary — rename_from","text":"x Object whose elements renamed. dict named character vector list strings names old values new names. default Value(s) used names matched name dict. Recycled length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/rename_from.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename elements from dictionary — rename_from","text":"x elements renamed according dict.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/rename_from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename elements from dictionary — rename_from","text":"","code":"mtcars |> pal::rename_from(dict = c(mpg  = \"Miles/(US) gallon\",                                     cyl  = \"Number of cylinders\",                                     disp = \"Displacement (cu.in.)\",                                     hp   = \"Gross horsepower\",                                     drat = \"Rear axle ratio\",                                     wt   = \"Weight (1000 lbs)\",                                     qsec = \"1/4 mile time\",                                     vs   = \"Engine (0 = V-shaped, 1 = straight)\",                                     am   = \"Transmission (0 = automatic, 1 = manual)\",                                     gear = \"Number of forward gears\",                                     carb = \"Number of carburetors\",                                     not_there = \"Yikes!\")) #>                     Miles/(US) gallon Number of cylinders Displacement (cu.in.) Gross horsepower Rear axle ratio Weight (1000 lbs) 1/4 mile time #> Mazda RX4                        21.0                   6                 160.0              110            3.90             2.620         16.46 #> Mazda RX4 Wag                    21.0                   6                 160.0              110            3.90             2.875         17.02 #> Datsun 710                       22.8                   4                 108.0               93            3.85             2.320         18.61 #> Hornet 4 Drive                   21.4                   6                 258.0              110            3.08             3.215         19.44 #> Hornet Sportabout                18.7                   8                 360.0              175            3.15             3.440         17.02 #> Valiant                          18.1                   6                 225.0              105            2.76             3.460         20.22 #> Duster 360                       14.3                   8                 360.0              245            3.21             3.570         15.84 #> Merc 240D                        24.4                   4                 146.7               62            3.69             3.190         20.00 #> Merc 230                         22.8                   4                 140.8               95            3.92             3.150         22.90 #> Merc 280                         19.2                   6                 167.6              123            3.92             3.440         18.30 #> Merc 280C                        17.8                   6                 167.6              123            3.92             3.440         18.90 #> Merc 450SE                       16.4                   8                 275.8              180            3.07             4.070         17.40 #> Merc 450SL                       17.3                   8                 275.8              180            3.07             3.730         17.60 #> Merc 450SLC                      15.2                   8                 275.8              180            3.07             3.780         18.00 #> Cadillac Fleetwood               10.4                   8                 472.0              205            2.93             5.250         17.98 #> Lincoln Continental              10.4                   8                 460.0              215            3.00             5.424         17.82 #> Chrysler Imperial                14.7                   8                 440.0              230            3.23             5.345         17.42 #> Fiat 128                         32.4                   4                  78.7               66            4.08             2.200         19.47 #> Honda Civic                      30.4                   4                  75.7               52            4.93             1.615         18.52 #> Toyota Corolla                   33.9                   4                  71.1               65            4.22             1.835         19.90 #> Toyota Corona                    21.5                   4                 120.1               97            3.70             2.465         20.01 #> Dodge Challenger                 15.5                   8                 318.0              150            2.76             3.520         16.87 #> AMC Javelin                      15.2                   8                 304.0              150            3.15             3.435         17.30 #> Camaro Z28                       13.3                   8                 350.0              245            3.73             3.840         15.41 #> Pontiac Firebird                 19.2                   8                 400.0              175            3.08             3.845         17.05 #> Fiat X1-9                        27.3                   4                  79.0               66            4.08             1.935         18.90 #> Porsche 914-2                    26.0                   4                 120.3               91            4.43             2.140         16.70 #> Lotus Europa                     30.4                   4                  95.1              113            3.77             1.513         16.90 #> Ford Pantera L                   15.8                   8                 351.0              264            4.22             3.170         14.50 #> Ferrari Dino                     19.7                   6                 145.0              175            3.62             2.770         15.50 #> Maserati Bora                    15.0                   8                 301.0              335            3.54             3.570         14.60 #> Volvo 142E                       21.4                   4                 121.0              109            4.11             2.780         18.60 #>                     Engine (0 = V-shaped, 1 = straight) Transmission (0 = automatic, 1 = manual) Number of forward gears Number of carburetors #> Mazda RX4                                             0                                        1                       4                     4 #> Mazda RX4 Wag                                         0                                        1                       4                     4 #> Datsun 710                                            1                                        1                       4                     1 #> Hornet 4 Drive                                        1                                        0                       3                     1 #> Hornet Sportabout                                     0                                        0                       3                     2 #> Valiant                                               1                                        0                       3                     1 #> Duster 360                                            0                                        0                       3                     4 #> Merc 240D                                             1                                        0                       4                     2 #> Merc 230                                              1                                        0                       4                     2 #> Merc 280                                              1                                        0                       4                     4 #> Merc 280C                                             1                                        0                       4                     4 #> Merc 450SE                                            0                                        0                       3                     3 #> Merc 450SL                                            0                                        0                       3                     3 #> Merc 450SLC                                           0                                        0                       3                     3 #> Cadillac Fleetwood                                    0                                        0                       3                     4 #> Lincoln Continental                                   0                                        0                       3                     4 #> Chrysler Imperial                                     0                                        0                       3                     4 #> Fiat 128                                              1                                        1                       4                     1 #> Honda Civic                                           1                                        1                       4                     2 #> Toyota Corolla                                        1                                        1                       4                     1 #> Toyota Corona                                         1                                        0                       3                     1 #> Dodge Challenger                                      0                                        0                       3                     2 #> AMC Javelin                                           0                                        0                       3                     2 #> Camaro Z28                                            0                                        0                       3                     4 #> Pontiac Firebird                                      0                                        0                       3                     2 #> Fiat X1-9                                             1                                        1                       4                     1 #> Porsche 914-2                                         0                                        1                       5                     2 #> Lotus Europa                                          1                                        1                       5                     2 #> Ford Pantera L                                        0                                        1                       5                     4 #> Ferrari Dino                                          0                                        1                       5                     6 #> Maserati Bora                                         0                                        1                       5                     8 #> Volvo 142E                                            1                                        1                       4                     2"},{"path":"https://pal.rpkg.dev/dev/reference/req_cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a cached HTTP GET request — req_cached","title":"Perform a cached HTTP GET request — req_cached","text":"Convenience wrapper around bunch httr2 functions.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/req_cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a cached HTTP GET request — req_cached","text":"","code":"req_cached(url, max_tries = 3L)"},{"path":"https://pal.rpkg.dev/dev/reference/req_cached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a cached HTTP GET request — req_cached","text":"url HTTP protocol address. scheme optional, \"google.com\" \"https://google.com\" work. character scalar. max_tries Maximum number attempts retry case HTTP error. integerish scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/req_cached.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a cached HTTP GET request — req_cached","text":"HTTP request succeeds, status code ok (e.g. 200), HTTP response. HTTP request succeeds, status code error (e.g 404), error class c(\"httr2_http_404\", \"httr2_http\"). default, 400 500 status codes treated error, can customise req_error(). HTTP request fails (e.g. connection dropped server exist), error class \"httr2_failure\".","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Round to any number — round_to","title":"Round to any number — round_to","text":"Round numeric vector number, rounded default (round_up = TRUE).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round to any number — round_to","text":"","code":"round_to(x, to = 0.2, round_up = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round to any number — round_to","text":"x Vector numbers round. Number round x . numeric scalar. round_up Whether round remainder exactly / 2 . Set FALSE order round .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round to any number — round_to","text":"numeric vector length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round to any number — round_to","text":"function's precision limited 15 significant digits order account limits R's floating point representation. computationally efficient alternative unexported scales:::round_any() drives scales::number() – drawback lacks control rounding exact remainders accuracy / 2, .e. always rounds .","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/round_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round to any number — round_to","text":"","code":"vals = c(0.025, 0.1, 0.1999, 0.099999, 0.49, 0.55, 0.5, 0.9, 1) vals |> pal::round_to(to = 0.05) #> [1] 0.05 0.10 0.20 0.10 0.50 0.55 0.50 0.90 1.00 vals |> pal::round_to(to = 0.05,                       round_up = FALSE) #> [1] 0.00 0.10 0.20 0.10 0.50 0.55 0.50 0.90 1.00"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get roxygen2 blocks — roxy_blocks","title":"Get roxygen2 blocks — roxy_blocks","text":"Parses roxygen2 package documentation specific R package single .R source code file.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get roxygen2 blocks — roxy_blocks","text":"","code":"roxy_blocks(pkg = NULL, ..., text = NULL, quiet = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get roxygen2 blocks — roxy_blocks","text":"pkg, text Either package name (pkg) character vector R source code lines (text) extract object's roxygen2 tag value . ... arguments passed utils::download.packages(), excluding \"pkgs\", \"destdir\", \"available\", \"type\" \"quiet\". relevant pkg provided. quiet Whether suppress printing status output internal processing.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get roxygen2 blocks — roxy_blocks","text":"list roxy_block objects.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/roxy_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get roxygen2 blocks — roxy_blocks","text":"","code":"# Either provide an R source file as a character vector `text`... text <- readr::read_lines(paste0(\"https://raw.githubusercontent.com/r-lib/rlang/\",                                  \"db52a58d505b65f58ba922d4752b5b0061f2a98c/R/fn.R\"))  pal::roxy_blocks(text = text) |> head(n = 3L) #> [[1]] #> <roxy_block> [<text>:39] #>   $tag #>     [line:  1] @title 'Create a function' {parsed} #>     [line:  3] @description '...' {parsed} #>     [line: 10] @param 'args A named list or pairlist of default argume...' {parsed} #>     [line: 14] @param 'body A language object representing the code in...' {parsed} #>     [line: 17] @param 'env The parent environment of the function, def...' {parsed} #>     [line: 19] @export '' {parsed} #>     [line: 20] @examples '...' {parsed} #>     [line: 39] @usage '<generated>' {parsed} #>     [line: 39] @.formals '<generated>' {parsed} #>     [line: 39] @backref '<generated>' {parsed} #>   $call   new_function <- function(args, body, env = caller_env()) { ... #>   $object <function>  #>     $topic new_function #>     $alias new_function #>  #> [[2]] #> <roxy_block> [<text>:50] #>   $tag #>     [line: 46] @title 'Name of a primitive function' {parsed} #>     [line: 47] @param 'prim A primitive function such as [base::c()].' {parsed} #>     [line: 48] @keywords 'internal' {parsed} #>     [line: 49] @export '' {parsed} #>     [line: 50] @usage '<generated>' {parsed} #>     [line: 50] @.formals '<generated>' {parsed} #>     [line: 50] @backref '<generated>' {parsed} #>   $call   prim_name <- function(prim) { ... #>   $object <function>  #>     $topic prim_name #>     $alias prim_name #>  #> [[3]] #> <roxy_block> [<text>:91] #>   $tag #>     [line: 62] @title 'Extract arguments from a function' {parsed} #>     [line: 64] @description '`fn_fmls()` returns a named list of formal argu...' {parsed} #>     [line: 70] @details 'Unlike `formals()`, these helpers throw an erro...' {parsed} #>     [line: 73] @param 'fn A function. It is lookep up in the calling f...' {parsed} #>     [line: 75] @seealso '[call_args()] and [call_args_names()]' {parsed} #>     [line: 76] @export '' {parsed} #>     [line: 77] @examples '...' {parsed} #>     [line: 91] @usage '<generated>' {parsed} #>     [line: 91] @.formals '<generated>' {parsed} #>     [line: 91] @backref '<generated>' {parsed} #>   $call   fn_fmls <- function(fn = caller_fn()) { ... #>   $object <function>  #>     $topic fn_fmls #>     $alias fn_fmls #>   # ...or provide a package name as `pkg` try(   pal::roxy_blocks(pkg = \"tinkr\",                    repos = \"https://cloud.r-project.org\") |>     head(n = 3L) ) #> [[1]] #> <roxy_block> [add_md.R:9] #>   $tag #>     [line:  1] @title 'Add markdown content to an XML object' {parsed} #>     [line:  3] @param 'body an XML object generated via {tinkr}' {parsed} #>     [line:  4] @param 'md a string of new markdown to insert' {parsed} #>     [line:  5] @param 'where the position in the markdown document to ...' {parsed} #>     [line:  6] @keywords 'internal #> ' {parsed} #>     [line:  8] @return 'a copy of the XML object with the markdown inse...' {parsed} #>     [line:  9] @usage '<generated>' {parsed} #>     [line:  9] @.formals '<generated>' {parsed} #>     [line:  9] @backref '<generated>' {parsed} #>   $call   add_md <- function(body, md, where = 0L) { ... #>   $object <function>  #>     $topic add_md #>     $alias add_md #>  #> [[2]] #> <roxy_block> [add_md.R:59] #>   $tag #>     [line: 35] @title 'Convert markdown to XML' {parsed} #>     [line: 37] @param 'md a character vector of markdown text' {parsed} #>     [line: 38] @return 'an XML nodeset of the markdown text' {parsed} #>     [line: 39] @keywords 'internal' {parsed} #>     [line: 40] @examples '...' {parsed} #>     [line: 59] @usage '<generated>' {parsed} #>     [line: 59] @.formals '<generated>' {parsed} #>     [line: 59] @backref '<generated>' {parsed} #>   $call   md_to_xml <- function(md) { ... #>   $object <function>  #>     $topic md_to_xml #>     $alias md_to_xml #>  #> [[3]] #> <roxy_block> [asis-nodes.R:24] #>   $tag #>     [line:  1] @title 'Protect math elements from commonmark's charact...' {parsed} #>     [line:  3] @param 'body an XML object' {parsed} #>     [line:  4] @param 'ns an XML namespace object (defaults: [md_ns()]).' {parsed} #>     [line:  5] @return 'a copy of the modified XML object' {parsed} #>     [line:  6] @details 'Commonmark does not know what LaTeX is and will...' {parsed} #>     [line: 12] @note 'this function is also a method in the [tinkr::y...' {parsed} #>     [line: 14] @export '' {parsed} #>     [line: 15] @examples '...' {parsed} #>     [line: 24] @usage '<generated>' {parsed} #>     [line: 24] @.formals '<generated>' {parsed} #>     [line: 24] @backref '<generated>' {parsed} #>   $call   protect_math <- function(body, ns = md_ns()) { ... #>   $object <function>  #>     $topic protect_math #>     $alias protect_math #>"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get roxygen2 block object — roxy_obj","title":"Get roxygen2 block object — roxy_obj","text":"Extracts single object list roxy_block objects.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get roxygen2 block object — roxy_obj","text":"","code":"roxy_obj(blocks, obj_name)"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get roxygen2 block object — roxy_obj","text":"blocks list roxy_block objects returned roxy_blocks(). obj_name Object name extract, usually function name. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get roxygen2 block object — roxy_obj","text":"roxy_block object.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/roxy_tag_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object's roxygen2 tag value(s) — roxy_tag_value","title":"Get an object's roxygen2 tag value(s) — roxy_tag_value","text":"Extracts value(s) belonging tag_names documenting obj_name list roxy_block objects.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_tag_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object's roxygen2 tag value(s) — roxy_tag_value","text":"","code":"roxy_tag_value(blocks, obj_name, tag_names, param_name)"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_tag_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object's roxygen2 tag value(s) — roxy_tag_value","text":"blocks list roxy_block objects returned roxy_blocks(). obj_name Object name extract, usually function name. character scalar. tag_names Name(s) roxygen2 tag(s) (without @ prefix) extract value(s) . character vector. param_name Parameter name extract value . relevant \"param\" %% tag_names. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_tag_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object's roxygen2 tag value(s) — roxy_tag_value","text":"character vector length tag_names.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/roxy_tag_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object's roxygen2 tag value(s) — roxy_tag_value","text":"","code":"if (interactive()) {   try(     pal::roxy_blocks(pkg = \"viridisLite\") |>       pal::roxy_tag_value(obj_name = \"viridis\",                           tag_names = \"param\",                           param_name = \"alpha\") |>       cat()   ) }"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_to_md_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","title":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","text":"Converts roxygen2 documentation links pseudo-Markdown style actual Markdown ones using downlit::autolink_url().","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_to_md_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","text":"","code":"roxy_to_md_links(x)"},{"path":"https://pal.rpkg.dev/dev/reference/roxy_to_md_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","text":"x Markdown text roxygen2 documentation links. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/roxy_to_md_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/roxy_to_md_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert roxygen2 documentation links to Markdown — roxy_to_md_links","text":"","code":"pal::roxy_to_md_links(\"[base::c()] is so short I almost forget it's there.\") #> Warning: cannot open compressed file '/home/salim/.cache/pal-roxy_tag_value-tinkr/tinkr/DESCRIPTION', probable reason 'No such file or directory' #> [1] \"[`base::c()`](https://rdrr.io/r/base/c.html) is so short I almost forget it's there.\" pal::roxy_to_md_links(\"[`base::c()`], probably the most used base R function ever.\") #> Warning: cannot open compressed file '/home/salim/.cache/pal-roxy_tag_value-tinkr/tinkr/DESCRIPTION', probable reason 'No such file or directory' #> [1] \"[`base::c()`](https://rdrr.io/r/base/c.html), probably the most used base R function ever.\" pal::roxy_to_md_links(\"Some functions [are magic][downlit::autolink_url]!\") #> Warning: cannot open compressed file '/home/salim/.cache/pal-roxy_tag_value-tinkr/tinkr/DESCRIPTION', probable reason 'No such file or directory' #> [1] \"Some functions [are magic](https://downlit.r-lib.org/reference/autolink.html)!\" pal::roxy_to_md_links(\"downlit's [`autolink_url()`][downlit::autolink_url()] seems magic!\") #> Warning: cannot open compressed file '/home/salim/.cache/pal-roxy_tag_value-tinkr/tinkr/DESCRIPTION', probable reason 'No such file or directory' #> [1] \"downlit's [`autolink_url()`](https://downlit.r-lib.org/reference/autolink.html) seems magic!\""},{"path":"https://pal.rpkg.dev/dev/reference/safe_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum (safe) — safe_max","title":"Maximum (safe) — safe_max","text":"Modified version base::max() differs following ways: NAs input (...) ignored default (rm_na = TRUE). input length zero, output also length zero (type input). ensured inputs either numeric, length zero NA. case return value -Inf NA input contains -Inf NA. Dynamic dots supported.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum (safe) — safe_max","text":"","code":"safe_max(..., rm_na = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/safe_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum (safe) — safe_max","text":"... Numeric objects determine maximum. Dynamic dots supported. rm_na Ignore missing values .... missing values present rm_na = FALSE, result always NA.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum (safe) — safe_max","text":"numeric scalar empty value, type ....","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/safe_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum (safe) — safe_max","text":"","code":"# other than `base::max()`, this function removes `NA`s by default max(1, NA_real_, 2) #> [1] NA pal::safe_max(1, NA_real_, 2) #> [1] 2  # other than `base::max()`, this function does not return `-Inf` or `NA_character_` for # zero-length inputs max(NULL) #> Warning: no non-missing arguments to max; returning -Inf #> [1] -Inf max(integer()) #> Warning: no non-missing arguments to max; returning -Inf #> [1] -Inf pal::safe_max(NULL) #> NULL pal::safe_max(integer()) #> integer(0)  # other than `base::max()`, this function fails for non-numeric inputs max(\"zero\", 1L) #> [1] \"zero\" max(\"zero\", \"one\") #> [1] \"zero\" max(character()) #> Warning: no non-missing arguments, returning NA #> [1] NA try(pal::safe_max(\"zero\", 1L)) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'. try(pal::safe_max(\"zero\", \"one\")) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'. try(pal::safe_max(character())) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'."},{"path":"https://pal.rpkg.dev/dev/reference/safe_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum (safe) — safe_min","title":"Minimum (safe) — safe_min","text":"Modified version base::min() differs following ways: NAs input (...) ignored default (rm_na = TRUE). input length zero, output also length zero (type input). ensured inputs either numeric, length zero NA. case return value -Inf NA input contains -Inf NA. Dynamic dots supported.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum (safe) — safe_min","text":"","code":"safe_min(..., rm_na = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/safe_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum (safe) — safe_min","text":"... Numeric objects determine minimum. Dynamic dots supported. rm_na Ignore missing values .... missing values present rm_na = FALSE, result always NA.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum (safe) — safe_min","text":"numeric scalar empty value, type ....","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/safe_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum (safe) — safe_min","text":"","code":"# other than `base::min()`, this function removes `NA`s by default min(1, NA_real_, 2) #> [1] NA pal::safe_min(1, NA_real_, 2) #> [1] 1  # other than `base::min()`, this function does not return `-Inf` or `NA_character_` for # zero-length inputs min(NULL) #> Warning: no non-missing arguments to min; returning Inf #> [1] Inf min(integer()) #> Warning: no non-missing arguments to min; returning Inf #> [1] Inf pal::safe_min(NULL) #> NULL pal::safe_min(integer()) #> integer(0)  # other than `base::min()`, this function fails for non-numeric inputs min(\"zero\", 1L) #> [1] \"1\" min(\"zero\", \"one\") #> [1] \"one\" min(character()) #> Warning: no non-missing arguments, returning NA #> [1] NA try(pal::safe_min(\"zero\", 1L)) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'. try(pal::safe_min(\"zero\", \"one\")) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'. try(pal::safe_min(character())) #> Error in purrr::map(input, function(x) checkmate::assert_numeric(x, typed.missing = TRUE,  :  #>   ℹ In index: 1. #> Caused by error in `.f()`: #> ! Assertion on '...' failed: Must be of type 'numeric' (or 'NULL'), not 'character'."},{"path":"https://pal.rpkg.dev/dev/reference/safe_seq_len.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an integer sequence of specific length (safe) — safe_seq_len","title":"Generate an integer sequence of specific length (safe) — safe_seq_len","text":"Modified version base::seq_len() returns zero-length integer case zero-length input instead throwing error.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_seq_len.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an integer sequence of specific length (safe) — safe_seq_len","text":"","code":"safe_seq_len(n)"},{"path":"https://pal.rpkg.dev/dev/reference/safe_seq_len.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an integer sequence of specific length (safe) — safe_seq_len","text":"n Desired length integer sequence.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/safe_seq_len.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an integer sequence of specific length (safe) — safe_seq_len","text":"integer sequence starting 1L.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/safe_seq_len.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an integer sequence of specific length (safe) — safe_seq_len","text":"","code":"pal::safe_seq_len(5) #> [1] 1 2 3 4 5  # this function simply returns a zero-length integer for zero-length inputs... pal::safe_seq_len(NULL) #> integer(0) pal::safe_seq_len(integer()) #> integer(0)  # ...while `seq_len()` throws an error try(seq_len(NULL)) #> Warning: first element used of 'length.out' argument #> Error in seq_len(NULL) :  #>   argument must be coercible to non-negative integer try(seq_len(integer())) #> Warning: first element used of 'length.out' argument #> Error in seq_len(integer()) :  #>   argument must be coercible to non-negative integer"},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to sentence case with trailing punctuation mark — sentenceify","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"Converts input character vector ensures starts upper case letter ends specified punctuation mark.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"","code":"sentenceify(x, punctuation_mark = \".\")"},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"x Input converted sentence case, typically character vector. punctuation_mark Punctuation mark appended x. character scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"character vector length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"Note function alter characters x first last one.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/sentenceify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to sentence case with trailing punctuation mark — sentenceify","text":"","code":"pal::sentenceify(\"no verb, no sentence\") #> [1] \"No verb, no sentence.\"  # punctuation mark won't be duplicated if already existing pal::sentenceify(c(\"I've made my point\",                    \"good point.\")) #> [1] \"I've made my point.\" \"Good point.\""},{"path":"https://pal.rpkg.dev/dev/reference/stat_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical mode — stat_mode","title":"Statistical mode — stat_mode","text":"Computes statistical mode set values. mode defined frequent value, .e. value likely sampled.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/stat_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical mode — stat_mode","text":"","code":"stat_mode(x, type = c(\"one\", \"all\", \"n\"), rm_na = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/stat_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical mode — stat_mode","text":"x R object. type function calculate. \"one\": Return mode x. multiple modes mode exists, NA returned. \"\": Return modes x. none exists (e.g. values x distinct), NA returned. \"n\": Return number modes x. rm_na Ignore missing values x. logical scalar.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/stat_mode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical mode — stat_mode","text":"type = \"n\", number modes x (integer). Otherwise, mode(s) x NA none exist(s) (type x).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/stat_mode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical mode — stat_mode","text":"","code":"pal::stat_mode(c(rep(3L, times = 3), 1:9)) #> [1] 3 pal::stat_mode(c(1.5, 4, 9.9)) #> [1] NA  # if no mode exists, `NA` (of the same type as x) is returned pal::stat_mode(letters) #> [1] NA pal::stat_mode(c(letters, \"a\")) #> [1] \"a\"  # if multiple modes exist, `NA` is returned by default pal::stat_mode(c(letters, \"a\", \"b\")) #> [1] NA # set `type = \"all\"` to return all modes instead pal::stat_mode(c(letters, \"a\", \"b\"),                type = \"all\") #> [1] \"a\" \"b\"  # `NA` is treated as any other value by default pal::stat_mode(c(letters, \"a\", NA_character_, NA_character_),                type = \"all\") #> [1] \"a\" NA  # set `rm_na = TRUE` to ignore `NA` values pal::stat_mode(c(letters, \"a\", NA_character_, NA_character_),                type = \"all\",                rm_na = TRUE) #> [1] \"a\""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip Markdown formatting from character vector — strip_md","title":"Strip Markdown formatting from character vector — strip_md","text":"Removes Markdown formatting character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip Markdown formatting from character vector — strip_md","text":"","code":"strip_md(x, strip_footnotes = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip Markdown formatting from character vector — strip_md","text":"x character vector strip Markdown formatting . strip_footnotes Whether remove Markdown footnotes, . FALSE, footnotes canonicalized (sequential integer identifiers).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip Markdown formatting from character vector — strip_md","text":"character vector length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip Markdown formatting from character vector — strip_md","text":"function relies commonmark::markdown_text() supports CommonMark specification plus Github extensions. Unfortunately, Markdown footnotes stripped using commonmark::markdown_text(). Therefore separate option strip_footnotes offered relies regular expressions remove inline footnotes footnote definitions references.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/strip_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip Markdown formatting from character vector — strip_md","text":"","code":"pal::strip_md(   \"A **MD** formatted [string](https://en.wikipedia.org/wiki/String_(computer_science))\" ) #> [1] \"A MD formatted string\"  # link references are only removed *iff* the reference is included in `x`: pal::strip_md(\"[A reference link][refid]\\n\\n[refid]: https://example.com\") #> [1] \"A reference link\" pal::strip_md(\"[A reference link][refid]\\n\\n_No ref here..._\") #> [1] \"[A reference link][refid]\\n\\nNo ref here...\""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip Markdown footnotes from character vector — strip_md_footnotes","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"Removes Markdown footnotes character vector.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"","code":"strip_md_footnotes(x)"},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"x character vector strip Markdown footnotes . Note elements x processed separate Markdown domains, .e. individual lines belonging Markdown document.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"character vector length x.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"Note checked whether footnote references definitions actually match (identifier), thus removed even invalid.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/strip_md_footnotes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip Markdown footnotes from character vector — strip_md_footnotes","text":"","code":"pal::strip_md_footnotes(   \"An **MD** formatted string with footnote[^fn].\\n\\n[^fn]: A note.\\n\" ) #> [1] \"An **MD** formatted string with footnote.\""},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip YAML header from R Markdown — strip_yaml_header","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"Extracts body R Markdown file content, stripping possible YAML metadata block beginning.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"","code":"strip_yaml_header(rmd, eol = c(\"LF\", \"CRLF\", \"CR\", \"LFCR\"))"},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"rmd R Markdown file content character scalar. eol End line (EOL) control character sequence. One \"LF\" line feed (LF) character (\"\\n\"). standard Unix Unix-like systems (Linux, macOS, *BSD, etc.) default. \"CRLF\" carriage return + line feed (CR+LF) character sequence (\"\\r\\n\"). standard Microsoft Windows, DOS systems. \"CR\" carriage return (CR) character (\"\\r\"). standard classic Mac OS antiquated systems. \"LFCR\" line feed + carriage return (LF+CR) character sequence (\"\\n\\r\"). standard RISC OS exotic systems.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"Body R Markdown file character vector lines.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"Note R Markdown file format, YAML metadata block must occur beginning document (can one). Additional whitespace characters (incl. newlines) YAML metadata block allowed.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/strip_yaml_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip YAML header from R Markdown — strip_yaml_header","text":"","code":"rmd <- \" --- output: pal::gitlab_document ---  # A heading  Some prose. \"  rmd |>   stringr::str_split_1(\"\\n\") |>   pal::cat_lines() #>  #> --- #> output: pal::gitlab_document #> --- #>  #> # A heading #>  #> Some prose. #>   rmd |>   pal::strip_yaml_header() |>   pal::cat_lines() #>  #> # A heading #>  #> Some prose. #>"},{"path":"https://pal.rpkg.dev/dev/reference/test_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if CLI tool is available — test_cli","title":"Check if CLI tool is available — test_cli","text":"Tests whether command-line interface (CLI) tool found system's PATH optionally returns executable's filesystem path.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/test_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if CLI tool is available — test_cli","text":"","code":"test_cli(cmd, get_cmd_path = FALSE, force_which = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/test_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if CLI tool is available — test_cli","text":"cmd System command invoke CLI tool. character scalar. get_cmd_path Whether return filesystem path CLI tool. FALSE, boolean returned indicating CLI tool found system . force_which set TRUE, base::Sys.(), relies system command , used instead command -v determine availability cmd Unix-like systems. Windows, base::Sys.() used case. command -v generally recommended bourne-like shells therefore default Linux, macOS Unixes.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/test_cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if CLI tool is available — test_cli","text":"logical scalar get_cmd_path = FALSE, otherwise filesystem path cmd executable.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/test_cli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if CLI tool is available — test_cli","text":"","code":"pal::test_cli(\"Rscript\") #> [1] TRUE  cmd <- ifelse(xfun::is_windows(), \"pandoc.exe\", \"pandoc\") pal::test_cli(cmd, get_cmd_path = TRUE) #> /usr/bin/pandoc"},{"path":"https://pal.rpkg.dev/dev/reference/toml_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in and parse TOML file as strict list — toml_read","title":"Read in and parse TOML file as strict list — toml_read","text":"Reads file Tom's Obvious Minimal Language (TOML) format returns content (nested) strict list.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in and parse TOML file as strict list — toml_read","text":"","code":"toml_read(input, from_file = TRUE, verbose = FALSE)"},{"path":"https://pal.rpkg.dev/dev/reference/toml_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in and parse TOML file as strict list — toml_read","text":"input from_file = TRUE, path TOML file character scalar. Otherwise, TOML content character vector. from_file Whether input path TOML file already character vector TOML content. verbose [logical] Optional verbosity flag, current effect","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in and parse TOML file as strict list — toml_read","text":"strict list.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in and parse TOML file as strict list — toml_read","text":"file parsed using RcppTOML::parseTOML(escape = FALSE).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate TOML — toml_validate","title":"Validate TOML — toml_validate","text":"Validates TOML file character vector using external Taplo CLI, optionally JSON Schema (Draft 4).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate TOML — toml_validate","text":"","code":"toml_validate(input, from_file = TRUE, schema = NULL, top_errors_only = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate TOML — toml_validate","text":"input from_file = TRUE, path TOML file character scalar. Otherwise, TOML content character vector. from_file Whether input path TOML file already character vector TOML content. schema URL JSON Schema (Draft 4) file validate input . Can also local filesystem path specified file URI scheme (absolute path prefixed file://). NULL, schema-based validation performed input checked TOML-compliant. top_errors_only Whether reduce output top error message TOML CLI's error classes. FALSE, TOML CLI's complete error output shown.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate TOML — toml_validate","text":"validation successful, input invisibly. Otherwise error thrown.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate TOML — toml_validate","text":"highest supported JSON Schema specification Draft 4. limitation underlying tool Taplo. Taplo allows define schema used directly TOML file using schema header directive. Note schema argument precendence unless set NULL (default).","code":""},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"why-json-schema-based-validation","dir":"Reference","previous_headings":"","what":"Why JSON Schema-based validation","title":"Validate TOML — toml_validate","text":"Although two noteworthy attempts introducing native validation format TOML, TOLS TOML Schema, neither officially adopted yet. appears, take several years decades thing happens, ever. meantime, can use JSON Schema format alternative thanks awesome implementation Taplo CLI, written Rust programming language available single-binary program common platforms.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/toml_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate TOML — toml_validate","text":"","code":"try(   pal::toml_validate(input = \"key = tru\",                      from_file = FALSE) ) #> Error in pal::toml_validate(input = \"key = tru\", from_file = FALSE) :  #>   TOML validation failed with: #>    #> error: invalid TOML #>   ┌─ -:1:7 #>   │ #> 1 │ key = tru #>   │       ^^^ expected value #>  #>"},{"path":"https://pal.rpkg.dev/dev/reference/use_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Depend on another package — use_pkg","title":"Depend on another package — use_pkg","text":"Wrapper around usethis::use_package() different defaults optional DESCRIPTION file tidying.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/use_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depend on another package — use_pkg","text":"","code":"use_pkg(package, type = \"Imports\", min_version = TRUE, tidy = TRUE)"},{"path":"https://pal.rpkg.dev/dev/reference/use_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depend on another package — use_pkg","text":"package Name package depend . type Type dependency: must one \"Imports\", \"Depends\", \"Suggests\", \"Enhances\", \"LinkingTo\" (unique abbreviation). Matching case insensitive. min_version Optionally, supply minimum version package. Set TRUE use currently installed version use version string suitable numeric_version(), \"2.5.0\". tidy Whether run usethis::use_tidy_description() adding package dependencies.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/use_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depend on another package — use_pkg","text":"NULL, invisibly.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized if-else for pipes — when","title":"Generalized if-else for pipes — when","text":"flavour pattern matching (-else abstraction) value . matched sequence ... condition-action sets. valid match/condition found, action executed result action returned.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized if-else for pipes — when","text":"","code":"when(., ...)"},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized if-else for pipes — when","text":". Value match . ... Formulas, containing condition LHS action RHS. Named arguments define additional values. Dynamic dots supported.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized if-else for pipes — when","text":"value resulting action first matched condition, NULL matches found default given.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized if-else for pipes — when","text":"Condition-action sets written formulas conditions left-hand sides (LHS) actions right-hand sides (RHS). formula right-hand side treated condition always satisfied. default case one can also omit ~ symbol, note value evaluated early. named argument made available conditions actions, useful avoiding repeated temporary computations temporary assignments. Validity conditions tested base::isTRUE(). words conditions resulting one logical never valid. Note input value always treated single object, opposed base::ifelse() function. function copied package purrr since deprecated release purrr 1.0. pal::() can used drop-replacement purrr::(). credits go original authors purrr::() 2022-12-21.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/when.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized if-else for pipes — when","text":"","code":"1:10 |> pal::when(sum(.) <=  50 ~ sum(.),                   sum(.) <= 100 ~ sum(.)/2L,                   ~ 0L) #> [1] 27.5"},{"path":"https://pal.rpkg.dev/dev/reference/wrap_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap character in character — wrap_chr","title":"Wrap character in character — wrap_chr","text":"Wraps character vector x another character vector wrap (default string \").","code":""},{"path":"https://pal.rpkg.dev/dev/reference/wrap_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap character in character — wrap_chr","text":"","code":"wrap_chr(x, wrap = \"\\\"\")"},{"path":"https://pal.rpkg.dev/dev/reference/wrap_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap character in character — wrap_chr","text":"x character vector something coercible . fed as_chr() wrapping. wrap Character sequence x wrapped . character vector something coercible .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/wrap_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap character in character — wrap_chr","text":"character vector length wrap.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/wrap_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap character in character — wrap_chr","text":"","code":"mtcars |>   colnames() |>   pal::wrap_chr(wrap = \"`\") |>   magrittr::set_colnames(x = mtcars) |>   pal::pipe_table() #>  #>  #> |                        | **`mpg`**| **`cyl`**| **`disp`**| **`hp`**| **`drat`**| **`wt`**| **`qsec`**| **`vs`**| **`am`**| **`gear`**| **`carb`**| #> |:-----------------------|---------:|---------:|----------:|--------:|----------:|--------:|----------:|--------:|--------:|----------:|----------:| #> |**Mazda RX4**           |      21.0|         6|      160.0|      110|       3.90|    2.620|      16.46|        0|        1|          4|          4| #> |**Mazda RX4 Wag**       |      21.0|         6|      160.0|      110|       3.90|    2.875|      17.02|        0|        1|          4|          4| #> |**Datsun 710**          |      22.8|         4|      108.0|       93|       3.85|    2.320|      18.61|        1|        1|          4|          1| #> |**Hornet 4 Drive**      |      21.4|         6|      258.0|      110|       3.08|    3.215|      19.44|        1|        0|          3|          1| #> |**Hornet Sportabout**   |      18.7|         8|      360.0|      175|       3.15|    3.440|      17.02|        0|        0|          3|          2| #> |**Valiant**             |      18.1|         6|      225.0|      105|       2.76|    3.460|      20.22|        1|        0|          3|          1| #> |**Duster 360**          |      14.3|         8|      360.0|      245|       3.21|    3.570|      15.84|        0|        0|          3|          4| #> |**Merc 240D**           |      24.4|         4|      146.7|       62|       3.69|    3.190|      20.00|        1|        0|          4|          2| #> |**Merc 230**            |      22.8|         4|      140.8|       95|       3.92|    3.150|      22.90|        1|        0|          4|          2| #> |**Merc 280**            |      19.2|         6|      167.6|      123|       3.92|    3.440|      18.30|        1|        0|          4|          4| #> |**Merc 280C**           |      17.8|         6|      167.6|      123|       3.92|    3.440|      18.90|        1|        0|          4|          4| #> |**Merc 450SE**          |      16.4|         8|      275.8|      180|       3.07|    4.070|      17.40|        0|        0|          3|          3| #> |**Merc 450SL**          |      17.3|         8|      275.8|      180|       3.07|    3.730|      17.60|        0|        0|          3|          3| #> |**Merc 450SLC**         |      15.2|         8|      275.8|      180|       3.07|    3.780|      18.00|        0|        0|          3|          3| #> |**Cadillac Fleetwood**  |      10.4|         8|      472.0|      205|       2.93|    5.250|      17.98|        0|        0|          3|          4| #> |**Lincoln Continental** |      10.4|         8|      460.0|      215|       3.00|    5.424|      17.82|        0|        0|          3|          4| #> |**Chrysler Imperial**   |      14.7|         8|      440.0|      230|       3.23|    5.345|      17.42|        0|        0|          3|          4| #> |**Fiat 128**            |      32.4|         4|       78.7|       66|       4.08|    2.200|      19.47|        1|        1|          4|          1| #> |**Honda Civic**         |      30.4|         4|       75.7|       52|       4.93|    1.615|      18.52|        1|        1|          4|          2| #> |**Toyota Corolla**      |      33.9|         4|       71.1|       65|       4.22|    1.835|      19.90|        1|        1|          4|          1| #> |**Toyota Corona**       |      21.5|         4|      120.1|       97|       3.70|    2.465|      20.01|        1|        0|          3|          1| #> |**Dodge Challenger**    |      15.5|         8|      318.0|      150|       2.76|    3.520|      16.87|        0|        0|          3|          2| #> |**AMC Javelin**         |      15.2|         8|      304.0|      150|       3.15|    3.435|      17.30|        0|        0|          3|          2| #> |**Camaro Z28**          |      13.3|         8|      350.0|      245|       3.73|    3.840|      15.41|        0|        0|          3|          4| #> |**Pontiac Firebird**    |      19.2|         8|      400.0|      175|       3.08|    3.845|      17.05|        0|        0|          3|          2| #> |**Fiat X1-9**           |      27.3|         4|       79.0|       66|       4.08|    1.935|      18.90|        1|        1|          4|          1| #> |**Porsche 914-2**       |      26.0|         4|      120.3|       91|       4.43|    2.140|      16.70|        0|        1|          5|          2| #> |**Lotus Europa**        |      30.4|         4|       95.1|      113|       3.77|    1.513|      16.90|        1|        1|          5|          2| #> |**Ford Pantera L**      |      15.8|         8|      351.0|      264|       4.22|    3.170|      14.50|        0|        1|          5|          4| #> |**Ferrari Dino**        |      19.7|         6|      145.0|      175|       3.62|    2.770|      15.50|        0|        1|          5|          6| #> |**Maserati Bora**       |      15.0|         8|      301.0|      335|       3.54|    3.570|      14.60|        0|        1|          5|          8| #> |**Volvo 142E**          |      21.4|         4|      121.0|      109|       4.11|    2.780|      18.60|        1|        1|          4|          2|"},{"path":"https://pal.rpkg.dev/dev/reference/write_widget.html","id":null,"dir":"Reference","previous_headings":"","what":"Write HTML widget to file — write_widget","title":"Write HTML widget to file — write_widget","text":"Writes HTML widget's main container <div> data <script> tags file.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write HTML widget to file — write_widget","text":"","code":"write_widget(x, path)"},{"path":"https://pal.rpkg.dev/dev/reference/write_widget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write HTML widget to file — write_widget","text":"x HTML widget object. path File path write HTML widget's core tags .","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write HTML widget to file — write_widget","text":"content written path character scalar, invisibly.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write HTML widget to file — write_widget","text":"htmlwidgets::saveWidget(), function write complete HTML document widget's core tags. Hence intended create files turn included another HTML file, e.g. via static site generator. HTML widget's dependencies must handled separately, e.g. using write_widget_deps(). directly get HTML widget's core tags character scalar, use .character(htmltools::tagList(x)).","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/write_widget_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"Write HTML widget dependencies — write_widget_deps","title":"Write HTML widget dependencies — write_widget_deps","text":"Writes HTML widget's JS CSS dependencies files returns snippet inclusion <head> HTML document.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write HTML widget dependencies — write_widget_deps","text":"","code":"write_widget_deps(   x,   path,   path_base,   path_head_snippet = NULL,   quiet = !is.null(path_head_snippet) )"},{"path":"https://pal.rpkg.dev/dev/reference/write_widget_deps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write HTML widget dependencies — write_widget_deps","text":"x HTML widget object. path Directory path write HTML widget's dependencies . subfolder created dependency. path_base Base path determine relative root path inclusion widget's dependencies. Must parent equal path. path_head_snippet Optional file path write snippet inclusion widget's dependencies <head> HTML document . quiet Whether print snippet inclusion widget's dependencies console.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget_deps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write HTML widget dependencies — write_widget_deps","text":"HTML object suitable inclusion <head> HTML document, invisibly.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/write_widget_deps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write HTML widget dependencies — write_widget_deps","text":"write HTML widget's core tags file, use write_widget().","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/xml_to_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from CommonMark XML to (R) Markdown — xml_to_md","title":"Convert from CommonMark XML to (R) Markdown — xml_to_md","text":"Convert CommonMark XML (R) Markdown","code":""},{"path":"https://pal.rpkg.dev/dev/reference/xml_to_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from CommonMark XML to (R) Markdown — xml_to_md","text":"","code":"xml_to_md(xml)"},{"path":"https://pal.rpkg.dev/dev/reference/xml_to_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from CommonMark XML to (R) Markdown — xml_to_md","text":"xml CommonMark parse tree. xml_document, xml_nodeset xml_node.","code":""},{"path":"https://pal.rpkg.dev/dev/reference/xml_to_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from CommonMark XML to (R) Markdown — xml_to_md","text":"character scalar.","code":""},{"path":[]},{"path":"https://pal.rpkg.dev/dev/reference/xml_to_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from CommonMark XML to (R) Markdown — xml_to_md","text":"","code":"\"# A title  Some prose.  ## A subtitle  More prose.  ## Another subtitle  Out of prose here.  ### A sub-subtitle  I'm dug in.  # Another title  A last word.\" |>   pal::md_to_xml() |>   xml2::xml_contents() |>   pal::xml_to_md() |>   cat() #> Warning: cannot open compressed file '/home/salim/.cache/pal-roxy_tag_value-tinkr/tinkr/DESCRIPTION', probable reason 'No such file or directory' #> # A title #>  #> Some prose. #>  #> ## A subtitle #>  #> More prose. #>  #> ## Another subtitle #>  #> Out of prose here. #>  #> ### A sub-subtitle #>  #> I'm dug in. #>  #> # Another title #>  #> A last word."}]
